// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
class ULeapFrame;
struct FVector;
struct FMatrix;
class ULeapFingerList;
#ifdef LEAPMOTION_LeapHand_generated_h
#error "LeapHand.generated.h already included, missing '#pragma once' in LeapHand.h"
#endif
#define LEAPMOTION_LeapHand_generated_h

#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execTranslationProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->TranslationProbability(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execTranslation) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->Translation(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execScaleProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->ScaleProbability(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execScaleFactor) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->ScaleFactor(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execRotationProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->RotationProbability(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execRotationAxis) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->RotationAxis(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execRotationMatrix) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(FMatrix*)Z_Param__Result=this->RotationMatrix(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execRotationAngleWithAxis) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_axis); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->RotationAngleWithAxis(Z_Param_otherFrame,Z_Param_Out_axis); \
	} \
 \
	DECLARE_FUNCTION(execRotationAngle) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->RotationAngle(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execFingers) \
	{ \
		P_FINISH; \
		*(ULeapFingerList**)Z_Param__Result=this->Fingers(); \
	} \
 \
	DECLARE_FUNCTION(execFrame) \
	{ \
		P_FINISH; \
		*(ULeapFrame**)Z_Param__Result=this->Frame(); \
	}


#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execTranslationProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->TranslationProbability(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execTranslation) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->Translation(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execScaleProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->ScaleProbability(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execScaleFactor) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->ScaleFactor(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execRotationProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->RotationProbability(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execRotationAxis) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=this->RotationAxis(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execRotationMatrix) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(FMatrix*)Z_Param__Result=this->RotationMatrix(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execRotationAngleWithAxis) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_axis); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->RotationAngleWithAxis(Z_Param_otherFrame,Z_Param_Out_axis); \
	} \
 \
	DECLARE_FUNCTION(execRotationAngle) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_otherFrame); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->RotationAngle(Z_Param_otherFrame); \
	} \
 \
	DECLARE_FUNCTION(execFingers) \
	{ \
		P_FINISH; \
		*(ULeapFingerList**)Z_Param__Result=this->Fingers(); \
	} \
 \
	DECLARE_FUNCTION(execFrame) \
	{ \
		P_FINISH; \
		*(ULeapFrame**)Z_Param__Result=this->Frame(); \
	}


#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesULeapHand(); \
	friend LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapHand(); \
	public: \
	DECLARE_CLASS(ULeapHand, UObject, COMPILED_IN_FLAGS(0), 0, LeapMotion, NO_API) \
	DECLARE_SERIALIZER(ULeapHand) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const { return const_cast<ULeapHand*>(this); }


#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_INCLASS \
	private: \
	static void StaticRegisterNativesULeapHand(); \
	friend LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapHand(); \
	public: \
	DECLARE_CLASS(ULeapHand, UObject, COMPILED_IN_FLAGS(0), 0, LeapMotion, NO_API) \
	DECLARE_SERIALIZER(ULeapHand) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const { return const_cast<ULeapHand*>(this); }


#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API ULeapHand(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(ULeapHand) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, ULeapHand); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(ULeapHand); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API ULeapHand(const ULeapHand& InCopy); \
public:


#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API ULeapHand(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API ULeapHand(const ULeapHand& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, ULeapHand); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(ULeapHand); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(ULeapHand)


#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_8_PROLOG
#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_RPC_WRAPPERS \
	osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_INCLASS \
	osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_RPC_WRAPPERS_NO_PURE_DECLS \
	osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_INCLASS_NO_PURE_DECLS \
	osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h_11_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class LeapHand."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID osu3d_cpp_Plugins_LeapMotion_Source_LeapMotion_Public_LeapHand_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
