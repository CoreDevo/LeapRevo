// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/LeapMotionPrivatePCH.h"
#include "LeapMotion.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeLeapMotion() {}
	void UAnimBone::StaticRegisterNativesUAnimBone()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAnimBone::StaticClass(),"ChangeBasis",(Native)&UAnimBone::execChangeBasis);
		FNativeFunctionRegistrar::RegisterFunction(UAnimBone::StaticClass(),"Enabled",(Native)&UAnimBone::execEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UAnimBone::StaticClass(),"GetTransform",(Native)&UAnimBone::execGetTransform);
		FNativeFunctionRegistrar::RegisterFunction(UAnimBone::StaticClass(),"SetEnabled",(Native)&UAnimBone::execSetEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UAnimBone::StaticClass(),"SetFromTransform",(Native)&UAnimBone::execSetFromTransform);
		FNativeFunctionRegistrar::RegisterFunction(UAnimBone::StaticClass(),"TranslateBone",(Native)&UAnimBone::execTranslateBone);
	}
	IMPLEMENT_CLASS(UAnimBone, 4183203427);
static class UEnum* LeapZone_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapZone();
		extern LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LeapMotion_LeapZone, Z_Construct_UPackage_LeapMotion(), TEXT("LeapZone"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LeapZone(LeapZone_StaticEnum, TEXT("/Script/LeapMotion"));
static class UEnum* LeapHandType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapHandType();
		extern LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LeapMotion_LeapHandType, Z_Construct_UPackage_LeapMotion(), TEXT("LeapHandType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LeapHandType(LeapHandType_StaticEnum, TEXT("/Script/LeapMotion"));
static class UEnum* LeapBasicDirection_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapBasicDirection();
		extern LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LeapMotion_LeapBasicDirection, Z_Construct_UPackage_LeapMotion(), TEXT("LeapBasicDirection"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LeapBasicDirection(LeapBasicDirection_StaticEnum, TEXT("/Script/LeapMotion"));
static class UEnum* LeapGestureState_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapGestureState();
		extern LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LeapMotion_LeapGestureState, Z_Construct_UPackage_LeapMotion(), TEXT("LeapGestureState"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LeapGestureState(LeapGestureState_StaticEnum, TEXT("/Script/LeapMotion"));
static class UEnum* LeapGestureType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapGestureType();
		extern LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LeapMotion_LeapGestureType, Z_Construct_UPackage_LeapMotion(), TEXT("LeapGestureType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LeapGestureType(LeapGestureType_StaticEnum, TEXT("/Script/LeapMotion"));
static class UEnum* LeapBoneType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapBoneType();
		extern LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LeapMotion_LeapBoneType, Z_Construct_UPackage_LeapMotion(), TEXT("LeapBoneType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LeapBoneType(LeapBoneType_StaticEnum, TEXT("/Script/LeapMotion"));
static class UEnum* LeapFingerType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapFingerType();
		extern LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LeapMotion_LeapFingerType, Z_Construct_UPackage_LeapMotion(), TEXT("LeapFingerType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LeapFingerType(LeapFingerType_StaticEnum, TEXT("/Script/LeapMotion"));
static class UEnum* AnimHandType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_AnimHandType();
		extern LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
		Singleton = GetStaticEnum(Z_Construct_UEnum_LeapMotion_AnimHandType, Z_Construct_UPackage_LeapMotion(), TEXT("AnimHandType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_AnimHandType(AnimHandType_StaticEnum, TEXT("/Script/LeapMotion"));
	void UAnimFinger::StaticRegisterNativesUAnimFinger()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAnimFinger::StaticClass(),"ChangeBasis",(Native)&UAnimFinger::execChangeBasis);
		FNativeFunctionRegistrar::RegisterFunction(UAnimFinger::StaticClass(),"Enabled",(Native)&UAnimFinger::execEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UAnimFinger::StaticClass(),"SetEnabled",(Native)&UAnimFinger::execSetEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UAnimFinger::StaticClass(),"SetFromLeapFinger",(Native)&UAnimFinger::execSetFromLeapFinger);
		FNativeFunctionRegistrar::RegisterFunction(UAnimFinger::StaticClass(),"TranslateFinger",(Native)&UAnimFinger::execTranslateFinger);
	}
	IMPLEMENT_CLASS(UAnimFinger, 3581124370);
	void ULeapHand::StaticRegisterNativesULeapHand()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"Fingers",(Native)&ULeapHand::execFingers);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"Frame",(Native)&ULeapHand::execFrame);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"RotationAngle",(Native)&ULeapHand::execRotationAngle);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"RotationAngleWithAxis",(Native)&ULeapHand::execRotationAngleWithAxis);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"RotationAxis",(Native)&ULeapHand::execRotationAxis);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"RotationMatrix",(Native)&ULeapHand::execRotationMatrix);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"RotationProbability",(Native)&ULeapHand::execRotationProbability);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"ScaleFactor",(Native)&ULeapHand::execScaleFactor);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"ScaleProbability",(Native)&ULeapHand::execScaleProbability);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"Translation",(Native)&ULeapHand::execTranslation);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHand::StaticClass(),"TranslationProbability",(Native)&ULeapHand::execTranslationProbability);
	}
	IMPLEMENT_CLASS(ULeapHand, 592696662);
	void UAnimHand::StaticRegisterNativesUAnimHand()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAnimHand::StaticClass(),"ChangeBasis",(Native)&UAnimHand::execChangeBasis);
		FNativeFunctionRegistrar::RegisterFunction(UAnimHand::StaticClass(),"Enabled",(Native)&UAnimHand::execEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UAnimHand::StaticClass(),"SetEnabled",(Native)&UAnimHand::execSetEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UAnimHand::StaticClass(),"SetFromLeapHand",(Native)&UAnimHand::execSetFromLeapHand);
		FNativeFunctionRegistrar::RegisterFunction(UAnimHand::StaticClass(),"TranslateHand",(Native)&UAnimHand::execTranslateHand);
	}
	IMPLEMENT_CLASS(UAnimHand, 827946416);
	void UAnimBody::StaticRegisterNativesUAnimBody()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAnimBody::StaticClass(),"ChangeBasis",(Native)&UAnimBody::execChangeBasis);
		FNativeFunctionRegistrar::RegisterFunction(UAnimBody::StaticClass(),"Enabled",(Native)&UAnimBody::execEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UAnimBody::StaticClass(),"SetEnabled",(Native)&UAnimBody::execSetEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UAnimBody::StaticClass(),"TranslateBody",(Native)&UAnimBody::execTranslateBody);
	}
	IMPLEMENT_CLASS(UAnimBody, 3441207668);
	void ULeapArm::StaticRegisterNativesULeapArm()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapArm::StaticClass(),"GetOrientation",(Native)&ULeapArm::execGetOrientation);
	}
	IMPLEMENT_CLASS(ULeapArm, 4147892654);
	void ULeapBaseObject::StaticRegisterNativesULeapBaseObject()
	{
	}
	IMPLEMENT_CLASS(ULeapBaseObject, 2365262094);
	void ULeapBone::StaticRegisterNativesULeapBone()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapBone::StaticClass(),"different",(Native)&ULeapBone::execdifferent);
		FNativeFunctionRegistrar::RegisterFunction(ULeapBone::StaticClass(),"equal",(Native)&ULeapBone::execequal);
		FNativeFunctionRegistrar::RegisterFunction(ULeapBone::StaticClass(),"GetOrientation",(Native)&ULeapBone::execGetOrientation);
	}
	IMPLEMENT_CLASS(ULeapBone, 848389248);
	void ULeapGesture::StaticRegisterNativesULeapGesture()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapGesture::StaticClass(),"Frame",(Native)&ULeapGesture::execFrame);
		FNativeFunctionRegistrar::RegisterFunction(ULeapGesture::StaticClass(),"Hands",(Native)&ULeapGesture::execHands);
		FNativeFunctionRegistrar::RegisterFunction(ULeapGesture::StaticClass(),"Pointables",(Native)&ULeapGesture::execPointables);
	}
	IMPLEMENT_CLASS(ULeapGesture, 952819055);
	void ULeapController::StaticRegisterNativesULeapController()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"EnableBackgroundTracking",(Native)&ULeapController::execEnableBackgroundTracking);
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"EnableGesture",(Native)&ULeapController::execEnableGesture);
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"EnableImageSupport",(Native)&ULeapController::execEnableImageSupport);
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"Frame",(Native)&ULeapController::execFrame);
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"HasFocus",(Native)&ULeapController::execHasFocus);
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"IsConnected",(Native)&ULeapController::execIsConnected);
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"IsServiceConnected",(Native)&ULeapController::execIsServiceConnected);
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"OptimizeForHMD",(Native)&ULeapController::execOptimizeForHMD);
		FNativeFunctionRegistrar::RegisterFunction(ULeapController::StaticClass(),"SetInterfaceDelegate",(Native)&ULeapController::execSetInterfaceDelegate);
	}
	IMPLEMENT_CLASS(ULeapController, 3485420068);
	void ILeapEventInterface::CircleGestureDetected(ULeapCircleGesture* gesture)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_CircleGestureDetected instead.");
	}
	void ILeapEventInterface::FingerCountChanged(int32 count)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_FingerCountChanged instead.");
	}
	void ILeapEventInterface::GestureDetected(ULeapGesture* gesture)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_GestureDetected instead.");
	}
	void ILeapEventInterface::HandCountChanged(int32 count)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_HandCountChanged instead.");
	}
	void ILeapEventInterface::KeyTapGestureDetected(ULeapKeyTapGesture* gesture)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_KeyTapGestureDetected instead.");
	}
	void ILeapEventInterface::LeapFingerMoved(ULeapFinger* finger)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapFingerMoved instead.");
	}
	void ILeapEventInterface::LeapFrontFingerTouch(ULeapFinger* finger)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapFrontFingerTouch instead.");
	}
	void ILeapEventInterface::LeapFrontMostFingerMoved(ULeapFinger* finger)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapFrontMostFingerMoved instead.");
	}
	void ILeapEventInterface::LeapHandGrabbed(float strength, ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapHandGrabbed instead.");
	}
	void ILeapEventInterface::LeapHandGrabbing(float strength, ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapHandGrabbing instead.");
	}
	void ILeapEventInterface::LeapHandMoved(ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapHandMoved instead.");
	}
	void ILeapEventInterface::LeapHandPinched(float strength, ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapHandPinched instead.");
	}
	void ILeapEventInterface::LeapHandPinching(float strength, ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapHandPinching instead.");
	}
	void ILeapEventInterface::LeapHandReleased(float strength, ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapHandReleased instead.");
	}
	void ILeapEventInterface::LeapHandUnpinched(float strength, ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapHandUnpinched instead.");
	}
	void ILeapEventInterface::LeapLeftHandMoved(ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapLeftHandMoved instead.");
	}
	void ILeapEventInterface::LeapLeftMostFingerMoved(ULeapFinger* finger)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapLeftMostFingerMoved instead.");
	}
	void ILeapEventInterface::LeapRightHandMoved(ULeapHand* hand)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapRightHandMoved instead.");
	}
	void ILeapEventInterface::LeapRightMostFingerMoved(ULeapFinger* finger)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_LeapRightMostFingerMoved instead.");
	}
	void ILeapEventInterface::RawImageReceived(UTexture2D* texture, ULeapImage* image)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_RawImageReceived instead.");
	}
	void ILeapEventInterface::ScreenTapGestureDetected(ULeapScreenTapGesture* gesture)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_ScreenTapGestureDetected instead.");
	}
	void ILeapEventInterface::SwipeGestureDetected(ULeapSwipeGesture* gesture)
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_SwipeGestureDetected instead.");
	}
	void ULeapEventInterface::StaticRegisterNativesULeapEventInterface()
	{
	}
	IMPLEMENT_CLASS(ULeapEventInterface, 2382369366);
	void ILeapEventInterface::Execute_CircleGestureDetected(UObject* O, ULeapCircleGesture* gesture)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventCircleGestureDetected_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_CircleGestureDetected);
		if (Func)
		{
			Parms.gesture=gesture;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_FingerCountChanged(UObject* O, int32 count)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventFingerCountChanged_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_FingerCountChanged);
		if (Func)
		{
			Parms.count=count;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_GestureDetected(UObject* O, ULeapGesture* gesture)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventGestureDetected_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_GestureDetected);
		if (Func)
		{
			Parms.gesture=gesture;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_HandCountChanged(UObject* O, int32 count)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventHandCountChanged_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_HandCountChanged);
		if (Func)
		{
			Parms.count=count;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_KeyTapGestureDetected(UObject* O, ULeapKeyTapGesture* gesture)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventKeyTapGestureDetected_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_KeyTapGestureDetected);
		if (Func)
		{
			Parms.gesture=gesture;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapFingerMoved(UObject* O, ULeapFinger* finger)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapFingerMoved_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapFingerMoved);
		if (Func)
		{
			Parms.finger=finger;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapFrontFingerTouch(UObject* O, ULeapFinger* finger)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapFrontFingerTouch_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapFrontFingerTouch);
		if (Func)
		{
			Parms.finger=finger;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapFrontMostFingerMoved(UObject* O, ULeapFinger* finger)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapFrontMostFingerMoved_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapFrontMostFingerMoved);
		if (Func)
		{
			Parms.finger=finger;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapHandGrabbed(UObject* O, float strength, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapHandGrabbed_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapHandGrabbed);
		if (Func)
		{
			Parms.strength=strength;
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapHandGrabbing(UObject* O, float strength, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapHandGrabbing_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapHandGrabbing);
		if (Func)
		{
			Parms.strength=strength;
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapHandMoved(UObject* O, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapHandMoved_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapHandMoved);
		if (Func)
		{
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapHandPinched(UObject* O, float strength, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapHandPinched_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapHandPinched);
		if (Func)
		{
			Parms.strength=strength;
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapHandPinching(UObject* O, float strength, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapHandPinching_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapHandPinching);
		if (Func)
		{
			Parms.strength=strength;
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapHandReleased(UObject* O, float strength, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapHandReleased_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapHandReleased);
		if (Func)
		{
			Parms.strength=strength;
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapHandUnpinched(UObject* O, float strength, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapHandUnpinched_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapHandUnpinched);
		if (Func)
		{
			Parms.strength=strength;
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapLeftHandMoved(UObject* O, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapLeftHandMoved_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapLeftHandMoved);
		if (Func)
		{
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapLeftMostFingerMoved(UObject* O, ULeapFinger* finger)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapLeftMostFingerMoved_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapLeftMostFingerMoved);
		if (Func)
		{
			Parms.finger=finger;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapRightHandMoved(UObject* O, ULeapHand* hand)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapRightHandMoved_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapRightHandMoved);
		if (Func)
		{
			Parms.hand=hand;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_LeapRightMostFingerMoved(UObject* O, ULeapFinger* finger)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventLeapRightMostFingerMoved_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_LeapRightMostFingerMoved);
		if (Func)
		{
			Parms.finger=finger;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_RawImageReceived(UObject* O, UTexture2D* texture, ULeapImage* image)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventRawImageReceived_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_RawImageReceived);
		if (Func)
		{
			Parms.texture=texture;
			Parms.image=image;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_ScreenTapGestureDetected(UObject* O, ULeapScreenTapGesture* gesture)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventScreenTapGestureDetected_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_ScreenTapGestureDetected);
		if (Func)
		{
			Parms.gesture=gesture;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ILeapEventInterface::Execute_SwipeGestureDetected(UObject* O, ULeapSwipeGesture* gesture)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULeapEventInterface::StaticClass()));
		LeapEventInterface_eventSwipeGestureDetected_Parms Parms;
		UFunction* const Func = O->FindFunction(LEAPMOTION_SwipeGestureDetected);
		if (Func)
		{
			Parms.gesture=gesture;
			O->ProcessEvent(Func, &Parms);
		}
	}
	void ULeapFingerList::StaticRegisterNativesULeapFingerList()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapFingerList::StaticClass(),"append",(Native)&ULeapFingerList::execappend);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFingerList::StaticClass(),"extended",(Native)&ULeapFingerList::execextended);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFingerList::StaticClass(),"frontmost",(Native)&ULeapFingerList::execfrontmost);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFingerList::StaticClass(),"getPointableById",(Native)&ULeapFingerList::execgetPointableById);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFingerList::StaticClass(),"leftmost",(Native)&ULeapFingerList::execleftmost);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFingerList::StaticClass(),"rightmost",(Native)&ULeapFingerList::execrightmost);
	}
	IMPLEMENT_CLASS(ULeapFingerList, 552037088);
	void ULeapFrame::StaticRegisterNativesULeapFrame()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Finger",(Native)&ULeapFrame::execFinger);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Fingers",(Native)&ULeapFrame::execFingers);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Gesture",(Native)&ULeapFrame::execGesture);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Gestures",(Native)&ULeapFrame::execGestures);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"GesturesSinceFrame",(Native)&ULeapFrame::execGesturesSinceFrame);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Hand",(Native)&ULeapFrame::execHand);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Hands",(Native)&ULeapFrame::execHands);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Images",(Native)&ULeapFrame::execImages);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"InteractionBox",(Native)&ULeapFrame::execInteractionBox);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Pointable",(Native)&ULeapFrame::execPointable);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Pointables",(Native)&ULeapFrame::execPointables);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"RotationAngle",(Native)&ULeapFrame::execRotationAngle);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"RotationAngleAroundAxis",(Native)&ULeapFrame::execRotationAngleAroundAxis);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"RotationAxis",(Native)&ULeapFrame::execRotationAxis);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"RotationProbability",(Native)&ULeapFrame::execRotationProbability);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"ScaleFactor",(Native)&ULeapFrame::execScaleFactor);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"ScaleProbability",(Native)&ULeapFrame::execScaleProbability);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Tool",(Native)&ULeapFrame::execTool);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Tools",(Native)&ULeapFrame::execTools);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"Translation",(Native)&ULeapFrame::execTranslation);
		FNativeFunctionRegistrar::RegisterFunction(ULeapFrame::StaticClass(),"TranslationProbability",(Native)&ULeapFrame::execTranslationProbability);
	}
	IMPLEMENT_CLASS(ULeapFrame, 4148478799);
	void ULeapCircleGesture::StaticRegisterNativesULeapCircleGesture()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapCircleGesture::StaticClass(),"Pointable",(Native)&ULeapCircleGesture::execPointable);
	}
	IMPLEMENT_CLASS(ULeapCircleGesture, 1236553731);
	void ULeapKeyTapGesture::StaticRegisterNativesULeapKeyTapGesture()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapKeyTapGesture::StaticClass(),"Pointable",(Native)&ULeapKeyTapGesture::execPointable);
	}
	IMPLEMENT_CLASS(ULeapKeyTapGesture, 4232543416);
	void ULeapScreenTapGesture::StaticRegisterNativesULeapScreenTapGesture()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapScreenTapGesture::StaticClass(),"Pointable",(Native)&ULeapScreenTapGesture::execPointable);
	}
	IMPLEMENT_CLASS(ULeapScreenTapGesture, 3878953173);
	void ULeapSwipeGesture::StaticRegisterNativesULeapSwipeGesture()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapSwipeGesture::StaticClass(),"Pointable",(Native)&ULeapSwipeGesture::execPointable);
	}
	IMPLEMENT_CLASS(ULeapSwipeGesture, 1744700639);
	void ULeapGestureList::StaticRegisterNativesULeapGestureList()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapGestureList::StaticClass(),"getIndex",(Native)&ULeapGestureList::execgetIndex);
	}
	IMPLEMENT_CLASS(ULeapGestureList, 4130602143);
	void ULeapHandList::StaticRegisterNativesULeapHandList()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapHandList::StaticClass(),"Frontmost",(Native)&ULeapHandList::execFrontmost);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHandList::StaticClass(),"getIndex",(Native)&ULeapHandList::execgetIndex);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHandList::StaticClass(),"Leftmost",(Native)&ULeapHandList::execLeftmost);
		FNativeFunctionRegistrar::RegisterFunction(ULeapHandList::StaticClass(),"Rightmost",(Native)&ULeapHandList::execRightmost);
	}
	IMPLEMENT_CLASS(ULeapHandList, 3227267582);
	void ULeapImage::StaticRegisterNativesULeapImage()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapImage::StaticClass(),"Distortion",(Native)&ULeapImage::execDistortion);
		FNativeFunctionRegistrar::RegisterFunction(ULeapImage::StaticClass(),"DistortionUE",(Native)&ULeapImage::execDistortionUE);
		FNativeFunctionRegistrar::RegisterFunction(ULeapImage::StaticClass(),"R8Texture",(Native)&ULeapImage::execR8Texture);
		FNativeFunctionRegistrar::RegisterFunction(ULeapImage::StaticClass(),"Rectify",(Native)&ULeapImage::execRectify);
		FNativeFunctionRegistrar::RegisterFunction(ULeapImage::StaticClass(),"Texture",(Native)&ULeapImage::execTexture);
		FNativeFunctionRegistrar::RegisterFunction(ULeapImage::StaticClass(),"Warp",(Native)&ULeapImage::execWarp);
	}
	IMPLEMENT_CLASS(ULeapImage, 3904017232);
	void ULeapImageList::StaticRegisterNativesULeapImageList()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapImageList::StaticClass(),"getIndex",(Native)&ULeapImageList::execgetIndex);
	}
	IMPLEMENT_CLASS(ULeapImageList, 2086756898);
	void ULeapInteractionBox::StaticRegisterNativesULeapInteractionBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapInteractionBox::StaticClass(),"DenormalizePoint",(Native)&ULeapInteractionBox::execDenormalizePoint);
		FNativeFunctionRegistrar::RegisterFunction(ULeapInteractionBox::StaticClass(),"NormalizePoint",(Native)&ULeapInteractionBox::execNormalizePoint);
	}
	IMPLEMENT_CLASS(ULeapInteractionBox, 948752519);
	void ULeapPointable::StaticRegisterNativesULeapPointable()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointable::StaticClass(),"different",(Native)&ULeapPointable::execdifferent);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointable::StaticClass(),"equal",(Native)&ULeapPointable::execequal);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointable::StaticClass(),"Frame",(Native)&ULeapPointable::execFrame);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointable::StaticClass(),"Hand",(Native)&ULeapPointable::execHand);
	}
	IMPLEMENT_CLASS(ULeapPointable, 2977846177);
	void ULeapFinger::StaticRegisterNativesULeapFinger()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapFinger::StaticClass(),"Bone",(Native)&ULeapFinger::execBone);
	}
	IMPLEMENT_CLASS(ULeapFinger, 190942833);
	void ULeapTool::StaticRegisterNativesULeapTool()
	{
	}
	IMPLEMENT_CLASS(ULeapTool, 1915174104);
	void ULeapPointableList::StaticRegisterNativesULeapPointableList()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointableList::StaticClass(),"append",(Native)&ULeapPointableList::execappend);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointableList::StaticClass(),"appendFingers",(Native)&ULeapPointableList::execappendFingers);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointableList::StaticClass(),"appendTools",(Native)&ULeapPointableList::execappendTools);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointableList::StaticClass(),"extended",(Native)&ULeapPointableList::execextended);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointableList::StaticClass(),"frontmost",(Native)&ULeapPointableList::execfrontmost);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointableList::StaticClass(),"getPointableById",(Native)&ULeapPointableList::execgetPointableById);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointableList::StaticClass(),"leftmost",(Native)&ULeapPointableList::execleftmost);
		FNativeFunctionRegistrar::RegisterFunction(ULeapPointableList::StaticClass(),"rightmost",(Native)&ULeapPointableList::execrightmost);
	}
	IMPLEMENT_CLASS(ULeapPointableList, 4257331078);
	void ULeapToolList::StaticRegisterNativesULeapToolList()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULeapToolList::StaticClass(),"append",(Native)&ULeapToolList::execappend);
		FNativeFunctionRegistrar::RegisterFunction(ULeapToolList::StaticClass(),"Count",(Native)&ULeapToolList::execCount);
		FNativeFunctionRegistrar::RegisterFunction(ULeapToolList::StaticClass(),"frontmost",(Native)&ULeapToolList::execfrontmost);
		FNativeFunctionRegistrar::RegisterFunction(ULeapToolList::StaticClass(),"getPointableById",(Native)&ULeapToolList::execgetPointableById);
		FNativeFunctionRegistrar::RegisterFunction(ULeapToolList::StaticClass(),"isEmpty",(Native)&ULeapToolList::execisEmpty);
		FNativeFunctionRegistrar::RegisterFunction(ULeapToolList::StaticClass(),"leftmost",(Native)&ULeapToolList::execleftmost);
		FNativeFunctionRegistrar::RegisterFunction(ULeapToolList::StaticClass(),"rightmost",(Native)&ULeapToolList::execrightmost);
	}
	IMPLEMENT_CLASS(ULeapToolList, 3756124391);
FName LEAPMOTION_CircleGestureDetected = FName(TEXT("CircleGestureDetected"));
FName LEAPMOTION_FingerCountChanged = FName(TEXT("FingerCountChanged"));
FName LEAPMOTION_GestureDetected = FName(TEXT("GestureDetected"));
FName LEAPMOTION_HandCountChanged = FName(TEXT("HandCountChanged"));
FName LEAPMOTION_KeyTapGestureDetected = FName(TEXT("KeyTapGestureDetected"));
FName LEAPMOTION_LeapFingerMoved = FName(TEXT("LeapFingerMoved"));
FName LEAPMOTION_LeapFrontFingerTouch = FName(TEXT("LeapFrontFingerTouch"));
FName LEAPMOTION_LeapFrontMostFingerMoved = FName(TEXT("LeapFrontMostFingerMoved"));
FName LEAPMOTION_LeapHandGrabbed = FName(TEXT("LeapHandGrabbed"));
FName LEAPMOTION_LeapHandGrabbing = FName(TEXT("LeapHandGrabbing"));
FName LEAPMOTION_LeapHandMoved = FName(TEXT("LeapHandMoved"));
FName LEAPMOTION_LeapHandPinched = FName(TEXT("LeapHandPinched"));
FName LEAPMOTION_LeapHandPinching = FName(TEXT("LeapHandPinching"));
FName LEAPMOTION_LeapHandReleased = FName(TEXT("LeapHandReleased"));
FName LEAPMOTION_LeapHandUnpinched = FName(TEXT("LeapHandUnpinched"));
FName LEAPMOTION_LeapLeftHandMoved = FName(TEXT("LeapLeftHandMoved"));
FName LEAPMOTION_LeapLeftMostFingerMoved = FName(TEXT("LeapLeftMostFingerMoved"));
FName LEAPMOTION_LeapRightHandMoved = FName(TEXT("LeapRightHandMoved"));
FName LEAPMOTION_LeapRightMostFingerMoved = FName(TEXT("LeapRightMostFingerMoved"));
FName LEAPMOTION_RawImageReceived = FName(TEXT("RawImageReceived"));
FName LEAPMOTION_ScreenTapGestureDetected = FName(TEXT("ScreenTapGestureDetected"));
FName LEAPMOTION_SwipeGestureDetected = FName(TEXT("SwipeGestureDetected"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FMatrix();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();

	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBone_ChangeBasis();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBone_Enabled();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBone_GetTransform();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBone_SetEnabled();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBone_SetFromTransform();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBone_TranslateBone();
	LEAPMOTION_API class UClass* Z_Construct_UClass_UAnimBone_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_UAnimBone();
	LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapZone();
	LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapHandType();
	LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapBasicDirection();
	LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapGestureState();
	LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapGestureType();
	LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapBoneType();
	LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_LeapFingerType();
	LEAPMOTION_API class UEnum* Z_Construct_UEnum_LeapMotion_AnimHandType();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimFinger_ChangeBasis();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimFinger_Enabled();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimFinger_SetEnabled();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimFinger_SetFromLeapFinger();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimFinger_TranslateFinger();
	LEAPMOTION_API class UClass* Z_Construct_UClass_UAnimFinger_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_UAnimFinger();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_Fingers();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_Frame();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_RotationAngle();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_RotationAngleWithAxis();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_RotationAxis();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_RotationMatrix();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_RotationProbability();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_ScaleFactor();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_ScaleProbability();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_Translation();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHand_TranslationProbability();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapHand_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapHand();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimHand_ChangeBasis();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimHand_Enabled();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimHand_SetEnabled();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimHand_SetFromLeapHand();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimHand_TranslateHand();
	LEAPMOTION_API class UClass* Z_Construct_UClass_UAnimHand_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_UAnimHand();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBody_ChangeBasis();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBody_Enabled();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBody_SetEnabled();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_UAnimBody_TranslateBody();
	LEAPMOTION_API class UClass* Z_Construct_UClass_UAnimBody_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_UAnimBody();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapArm_GetOrientation();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapArm_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapArm();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapBaseObject_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapBaseObject();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapBone_different();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapBone_equal();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapBone_GetOrientation();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapBone_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapBone();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapGesture_Frame();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapGesture_Hands();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapGesture_Pointables();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapGesture_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapGesture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_EnableBackgroundTracking();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_EnableGesture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_EnableImageSupport();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_Frame();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_HasFocus();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_IsConnected();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_IsServiceConnected();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_OptimizeForHMD();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapController_SetInterfaceDelegate();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapController_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapController();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_CircleGestureDetected();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_FingerCountChanged();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_GestureDetected();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_HandCountChanged();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_KeyTapGestureDetected();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapFingerMoved();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapFrontFingerTouch();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapFrontMostFingerMoved();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandGrabbed();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandGrabbing();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandMoved();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandPinched();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandPinching();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandReleased();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandUnpinched();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapLeftHandMoved();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapLeftMostFingerMoved();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapRightHandMoved();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapRightMostFingerMoved();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_RawImageReceived();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_ScreenTapGestureDetected();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapEventInterface_SwipeGestureDetected();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapEventInterface_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapEventInterface();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFingerList_append();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFingerList_extended();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFingerList_frontmost();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFingerList_getPointableById();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFingerList_leftmost();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFingerList_rightmost();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapFingerList_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapFingerList();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Finger();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Fingers();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Gesture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Gestures();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_GesturesSinceFrame();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Hand();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Hands();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Images();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_InteractionBox();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Pointable();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Pointables();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_RotationAngle();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_RotationAngleAroundAxis();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_RotationAxis();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_RotationProbability();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_ScaleFactor();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_ScaleProbability();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Tool();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Tools();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_Translation();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFrame_TranslationProbability();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapFrame_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapFrame();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapCircleGesture_Pointable();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapCircleGesture_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapCircleGesture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapKeyTapGesture_Pointable();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapKeyTapGesture_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapKeyTapGesture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapScreenTapGesture_Pointable();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapScreenTapGesture_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapScreenTapGesture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapSwipeGesture_Pointable();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapSwipeGesture_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapSwipeGesture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapGestureList_getIndex();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapGestureList_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapGestureList();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHandList_Frontmost();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHandList_getIndex();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHandList_Leftmost();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapHandList_Rightmost();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapHandList_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapHandList();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapImage_Distortion();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapImage_DistortionUE();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapImage_R8Texture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapImage_Rectify();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapImage_Texture();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapImage_Warp();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapImage_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapImage();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapImageList_getIndex();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapImageList_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapImageList();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapInteractionBox_DenormalizePoint();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapInteractionBox_NormalizePoint();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapInteractionBox_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapInteractionBox();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointable_different();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointable_equal();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointable_Frame();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointable_Hand();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapPointable_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapPointable();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapFinger_Bone();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapFinger_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapFinger();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapTool_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapTool();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointableList_append();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointableList_appendFingers();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointableList_appendTools();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointableList_extended();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointableList_frontmost();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointableList_getPointableById();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointableList_leftmost();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapPointableList_rightmost();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapPointableList_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapPointableList();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapToolList_append();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapToolList_Count();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapToolList_frontmost();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapToolList_getPointableById();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapToolList_isEmpty();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapToolList_leftmost();
	LEAPMOTION_API class UFunction* Z_Construct_UFunction_ULeapToolList_rightmost();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapToolList_NoRegister();
	LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapToolList();
	LEAPMOTION_API class UPackage* Z_Construct_UPackage_LeapMotion();
	UFunction* Z_Construct_UFunction_UAnimBone_ChangeBasis()
	{
		struct AnimBone_eventChangeBasis_Parms
		{
			FRotator PreBase;
			FRotator PostBase;
			bool adjustVectors;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ChangeBasis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimBone_eventChangeBasis_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(adjustVectors, AnimBone_eventChangeBasis_Parms, bool);
			UProperty* NewProp_adjustVectors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("adjustVectors"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(adjustVectors, AnimBone_eventChangeBasis_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(adjustVectors, AnimBone_eventChangeBasis_Parms), sizeof(bool), true);
			UProperty* NewProp_PostBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PostBase, AnimBone_eventChangeBasis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_PreBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreBase, AnimBone_eventChangeBasis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_adjustVectors"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimBone_Enabled()
	{
		struct AnimBone_eventEnabled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Enabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimBone_eventEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimBone_eventEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimBone_eventEnabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimBone_eventEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimBone_GetTransform()
	{
		struct AnimBone_eventGetTransform_Parms
		{
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimBone_eventGetTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AnimBone_eventGetTransform_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimBone_SetEnabled()
	{
		struct AnimBone_eventSetEnabled_Parms
		{
			bool enable;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimBone_eventSetEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(enable, AnimBone_eventSetEnabled_Parms, bool);
			UProperty* NewProp_enable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("enable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(enable, AnimBone_eventSetEnabled_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(enable, AnimBone_eventSetEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_enable"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimBone_SetFromTransform()
	{
		struct AnimBone_eventSetFromTransform_Parms
		{
			FTransform in;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFromTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(AnimBone_eventSetFromTransform_Parms));
			UProperty* NewProp_in = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("in"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(in, AnimBone_eventSetFromTransform_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimBone_TranslateBone()
	{
		struct AnimBone_eventTranslateBone_Parms
		{
			FVector shift;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TranslateBone"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimBone_eventTranslateBone_Parms));
			UProperty* NewProp_shift = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("shift"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(shift, AnimBone_eventTranslateBone_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimBone_NoRegister()
	{
		return UAnimBone::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimBone()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = UAnimBone::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBone_ChangeBasis());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBone_Enabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBone_GetTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBone_SetEnabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBone_SetFromTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBone_TranslateBone());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, UAnimBone), 0x0000000000000004);
				UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Length"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Length, UAnimBone), 0x0000000000000004);
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, UAnimBone), 0x0000000000000004, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Orientation, UAnimBone), 0x0000000000000004, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UAnimBone), 0x0000000000000004, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBone_ChangeBasis()); // 2876427904
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBone_Enabled()); // 3420176320
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBone_GetTransform()); // 2601229800
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBone_SetEnabled()); // 4225728014
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBone_SetFromTransform()); // 2342518788
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBone_TranslateBone()); // 2304445666
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AnimBody/AnimBone.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
				MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Anim Bone"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
				MetaData->SetValue(NewProp_Length, TEXT("Category"), TEXT("Anim Bone"));
				MetaData->SetValue(NewProp_Length, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Anim Bone"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
				MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("Anim Bone"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Anim Bone"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBone.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimBone(Z_Construct_UClass_UAnimBone, TEXT("UAnimBone"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimBone);
	UEnum* Z_Construct_UEnum_LeapMotion_LeapZone()
	{
		UPackage* Outer=Z_Construct_UPackage_LeapMotion();
		extern uint32 Get_Z_Construct_UEnum_LeapMotion_LeapZone_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("LeapZone"), 0, Get_Z_Construct_UEnum_LeapMotion_LeapZone_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapZone"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ZONE_ERROR")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ZONE_NONE")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ZONE_HOVERING")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ZONE_TOUCHING")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ZONE_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LeapEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LeapMotion_LeapZone_CRC() { return 4161149302U; }
	UEnum* Z_Construct_UEnum_LeapMotion_LeapHandType()
	{
		UPackage* Outer=Z_Construct_UPackage_LeapMotion();
		extern uint32 Get_Z_Construct_UEnum_LeapMotion_LeapHandType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("LeapHandType"), 0, Get_Z_Construct_UEnum_LeapMotion_LeapHandType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapHandType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAND_UNKNOWN")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAND_LEFT")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAND_RIGHT")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAND_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LeapEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LeapMotion_LeapHandType_CRC() { return 451594104U; }
	UEnum* Z_Construct_UEnum_LeapMotion_LeapBasicDirection()
	{
		UPackage* Outer=Z_Construct_UPackage_LeapMotion();
		extern uint32 Get_Z_Construct_UEnum_LeapMotion_LeapBasicDirection_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("LeapBasicDirection"), 0, Get_Z_Construct_UEnum_LeapMotion_LeapBasicDirection_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapBasicDirection"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DIRECTION_NONE")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DIRECTION_LEFT")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DIRECTION_RIGHT")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DIRECTION_UP")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DIRECTION_DOWN")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DIRECTION_AWAY")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DIRECTION_TOWARD")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DIRECTION_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LeapEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LeapMotion_LeapBasicDirection_CRC() { return 1124178981U; }
	UEnum* Z_Construct_UEnum_LeapMotion_LeapGestureState()
	{
		UPackage* Outer=Z_Construct_UPackage_LeapMotion();
		extern uint32 Get_Z_Construct_UEnum_LeapMotion_LeapGestureState_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("LeapGestureState"), 0, Get_Z_Construct_UEnum_LeapMotion_LeapGestureState_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapGestureState"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_STATE_INVALID")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_STATE_START")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_STATE_UPDATE")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_STATE_STOP")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_STATE_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LeapEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LeapMotion_LeapGestureState_CRC() { return 1111317596U; }
	UEnum* Z_Construct_UEnum_LeapMotion_LeapGestureType()
	{
		UPackage* Outer=Z_Construct_UPackage_LeapMotion();
		extern uint32 Get_Z_Construct_UEnum_LeapMotion_LeapGestureType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("LeapGestureType"), 0, Get_Z_Construct_UEnum_LeapMotion_LeapGestureType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapGestureType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_TYPE_INVALID")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_TYPE_SWIPE")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_TYPE_CIRCLE")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_TYPE_SCREEN_TAP")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_TYPE_KEY_TAP")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("GESTURE_TYPE_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LeapEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LeapMotion_LeapGestureType_CRC() { return 3296300644U; }
	UEnum* Z_Construct_UEnum_LeapMotion_LeapBoneType()
	{
		UPackage* Outer=Z_Construct_UPackage_LeapMotion();
		extern uint32 Get_Z_Construct_UEnum_LeapMotion_LeapBoneType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("LeapBoneType"), 0, Get_Z_Construct_UEnum_LeapMotion_LeapBoneType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapBoneType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TYPE_METACARPAL")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TYPE_PROXIMAL")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TYPE_INTERMEDIATE")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TYPE_DISTAL")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TYPE_ERROR")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TYPE_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LeapEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LeapMotion_LeapBoneType_CRC() { return 66097165U; }
	UEnum* Z_Construct_UEnum_LeapMotion_LeapFingerType()
	{
		UPackage* Outer=Z_Construct_UPackage_LeapMotion();
		extern uint32 Get_Z_Construct_UEnum_LeapMotion_LeapFingerType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("LeapFingerType"), 0, Get_Z_Construct_UEnum_LeapMotion_LeapFingerType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapFingerType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FINGER_TYPE_THUMB")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FINGER_TYPE_INDEX")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FINGER_TYPE_MIDDLE")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FINGER_TYPE_RING")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FINGER_TYPE_PINKY")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("FINGER_TYPE_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/LeapEnums.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LeapMotion_LeapFingerType_CRC() { return 687598850U; }
	UEnum* Z_Construct_UEnum_LeapMotion_AnimHandType()
	{
		UPackage* Outer=Z_Construct_UPackage_LeapMotion();
		extern uint32 Get_Z_Construct_UEnum_LeapMotion_AnimHandType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("AnimHandType"), 0, Get_Z_Construct_UEnum_LeapMotion_AnimHandType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimHandType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ANIM_HAND_UNKNOWN")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ANIM_HAND_LEFT")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ANIM_HAND_RIGHT")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ANIM_HAND_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_LeapMotion_AnimHandType_CRC() { return 1567504926U; }
	UFunction* Z_Construct_UFunction_UAnimFinger_ChangeBasis()
	{
		struct AnimFinger_eventChangeBasis_Parms
		{
			FRotator PreBase;
			FRotator PostBase;
			bool adjustVectors;
		};
		UObject* Outer=Z_Construct_UClass_UAnimFinger();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ChangeBasis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimFinger_eventChangeBasis_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(adjustVectors, AnimFinger_eventChangeBasis_Parms, bool);
			UProperty* NewProp_adjustVectors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("adjustVectors"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(adjustVectors, AnimFinger_eventChangeBasis_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(adjustVectors, AnimFinger_eventChangeBasis_Parms), sizeof(bool), true);
			UProperty* NewProp_PostBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PostBase, AnimFinger_eventChangeBasis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_PreBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreBase, AnimFinger_eventChangeBasis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Finger"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_adjustVectors"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimFinger_Enabled()
	{
		struct AnimFinger_eventEnabled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimFinger();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Enabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimFinger_eventEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimFinger_eventEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimFinger_eventEnabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimFinger_eventEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Finger"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimFinger_SetEnabled()
	{
		struct AnimFinger_eventSetEnabled_Parms
		{
			bool enable;
		};
		UObject* Outer=Z_Construct_UClass_UAnimFinger();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimFinger_eventSetEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(enable, AnimFinger_eventSetEnabled_Parms, bool);
			UProperty* NewProp_enable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("enable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(enable, AnimFinger_eventSetEnabled_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(enable, AnimFinger_eventSetEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Finger"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_enable"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimFinger_SetFromLeapFinger()
	{
		struct AnimFinger_eventSetFromLeapFinger_Parms
		{
			ULeapFinger* finger;
			TEnumAsByte<LeapHandType> handType;
		};
		UObject* Outer=Z_Construct_UClass_UAnimFinger();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFromLeapFinger"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimFinger_eventSetFromLeapFinger_Parms));
			UProperty* NewProp_handType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("handType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(handType, AnimFinger_eventSetFromLeapFinger_Parms), 0x0000000000000080, Z_Construct_UEnum_LeapMotion_LeapHandType());
			UProperty* NewProp_finger = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("finger"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(finger, AnimFinger_eventSetFromLeapFinger_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Finger"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimFinger_TranslateFinger()
	{
		struct AnimFinger_eventTranslateFinger_Parms
		{
			FVector shift;
		};
		UObject* Outer=Z_Construct_UClass_UAnimFinger();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TranslateFinger"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimFinger_eventTranslateFinger_Parms));
			UProperty* NewProp_shift = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("shift"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(shift, AnimFinger_eventTranslateFinger_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Finger"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimFinger_NoRegister()
	{
		return UAnimFinger::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimFinger()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = UAnimFinger::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimFinger_ChangeBasis());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimFinger_Enabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimFinger_SetEnabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimFinger_SetFromLeapFinger());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimFinger_TranslateFinger());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, UAnimFinger), 0x0000000000000004);
				UProperty* NewProp_Distal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Distal"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Distal, UAnimFinger), 0x0000000000000014, Z_Construct_UClass_UAnimBone_NoRegister());
				UProperty* NewProp_Intermediate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Intermediate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Intermediate, UAnimFinger), 0x0000000000000014, Z_Construct_UClass_UAnimBone_NoRegister());
				UProperty* NewProp_Proximal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Proximal"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Proximal, UAnimFinger), 0x0000000000000014, Z_Construct_UClass_UAnimBone_NoRegister());
				UProperty* NewProp_Metacarpal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Metacarpal"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Metacarpal, UAnimFinger), 0x0000000000000014, Z_Construct_UClass_UAnimBone_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimFinger_ChangeBasis()); // 3263432278
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimFinger_Enabled()); // 725844981
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimFinger_SetEnabled()); // 2530179087
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimFinger_SetFromLeapFinger()); // 801080469
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimFinger_TranslateFinger()); // 2818909837
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AnimBody/AnimFinger.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
				MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Anim Finger"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
				MetaData->SetValue(NewProp_Distal, TEXT("Category"), TEXT("Anim Finger"));
				MetaData->SetValue(NewProp_Distal, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
				MetaData->SetValue(NewProp_Intermediate, TEXT("Category"), TEXT("Anim Finger"));
				MetaData->SetValue(NewProp_Intermediate, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
				MetaData->SetValue(NewProp_Proximal, TEXT("Category"), TEXT("Anim Finger"));
				MetaData->SetValue(NewProp_Proximal, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
				MetaData->SetValue(NewProp_Metacarpal, TEXT("Category"), TEXT("Anim Finger"));
				MetaData->SetValue(NewProp_Metacarpal, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimFinger.h"));
				MetaData->SetValue(NewProp_Metacarpal, TEXT("ToolTip"), TEXT("Not used in basic animation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimFinger(Z_Construct_UClass_UAnimFinger, TEXT("UAnimFinger"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimFinger);
	UFunction* Z_Construct_UFunction_ULeapHand_Fingers()
	{
		struct LeapHand_eventFingers_Parms
		{
			ULeapFingerList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Fingers"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHand_eventFingers_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventFingers_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFingerList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Fingers"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_Frame()
	{
		struct LeapHand_eventFrame_Parms
		{
			ULeapFrame* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Frame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHand_eventFrame_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventFrame_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_RotationAngle()
	{
		struct LeapHand_eventRotationAngle_Parms
		{
			ULeapFrame* otherFrame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationAngle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHand_eventRotationAngle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventRotationAngle_Parms), 0x0000000000000580);
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventRotationAngle_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RotationAngle"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_RotationAngleWithAxis()
	{
		struct LeapHand_eventRotationAngleWithAxis_Parms
		{
			ULeapFrame* otherFrame;
			FVector axis;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationAngleWithAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(LeapHand_eventRotationAngleWithAxis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventRotationAngleWithAxis_Parms), 0x0000000000000580);
			UProperty* NewProp_axis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("axis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(axis, LeapHand_eventRotationAngleWithAxis_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventRotationAngleWithAxis_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RotationAngleWithAxis"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_RotationAxis()
	{
		struct LeapHand_eventRotationAxis_Parms
		{
			const ULeapFrame* otherFrame;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(LeapHand_eventRotationAxis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventRotationAxis_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventRotationAxis_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RotationAxis"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_RotationMatrix()
	{
		struct FMatrix
		{
			FPlane XPlane;
			FPlane YPlane;
			FPlane ZPlane;
			FPlane WPlane;
		};

		struct LeapHand_eventRotationMatrix_Parms
		{
			const ULeapFrame* otherFrame;
			FMatrix ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationMatrix"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(LeapHand_eventRotationMatrix_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventRotationMatrix_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FMatrix());
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventRotationMatrix_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RotationMatrix"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_RotationProbability()
	{
		struct LeapHand_eventRotationProbability_Parms
		{
			const ULeapFrame* otherFrame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationProbability"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHand_eventRotationProbability_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventRotationProbability_Parms), 0x0000000000000580);
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventRotationProbability_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RotationProbability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_ScaleFactor()
	{
		struct LeapHand_eventScaleFactor_Parms
		{
			const ULeapFrame* otherFrame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScaleFactor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHand_eventScaleFactor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventScaleFactor_Parms), 0x0000000000000580);
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventScaleFactor_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ScaleFactor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_ScaleProbability()
	{
		struct LeapHand_eventScaleProbability_Parms
		{
			const ULeapFrame* otherFrame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScaleProbability"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHand_eventScaleProbability_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventScaleProbability_Parms), 0x0000000000000580);
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventScaleProbability_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ScaleProbability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_Translation()
	{
		struct LeapHand_eventTranslation_Parms
		{
			const ULeapFrame* otherFrame;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Translation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(LeapHand_eventTranslation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventTranslation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventTranslation_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Translation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHand_TranslationProbability()
	{
		struct LeapHand_eventTranslationProbability_Parms
		{
			const ULeapFrame* otherFrame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TranslationProbability"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHand_eventTranslationProbability_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHand_eventTranslationProbability_Parms), 0x0000000000000580);
			UProperty* NewProp_otherFrame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("otherFrame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(otherFrame, LeapHand_eventTranslationProbability_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("TranslationProbability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapHand_NoRegister()
	{
		return ULeapHand::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapHand()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapHand::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_Fingers());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_Frame());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_RotationAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_RotationAngleWithAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_RotationAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_RotationMatrix());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_RotationProbability());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_ScaleFactor());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_ScaleProbability());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_Translation());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHand_TranslationProbability());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Id, ULeapHand), 0x0000000000000015);
				UProperty* NewProp_TimeVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeVisible"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeVisible, ULeapHand), 0x0000000000000015);
				UProperty* NewProp_StabilizedPalmPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StabilizedPalmPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StabilizedPalmPosition, ULeapHand), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, ULeapHand), 0x0000000000000015);
				UProperty* NewProp_SphereCenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SphereCenter"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SphereCenter, ULeapHand), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PinchStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PinchStrength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PinchStrength, ULeapHand), 0x0000000000000015);
				UProperty* NewProp_PalmWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PalmWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(PalmWidth, ULeapHand), 0x0000000000000015);
				UProperty* NewProp_GrabStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrabStrength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GrabStrength, ULeapHand), 0x0000000000000015);
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, ULeapHand), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Confidence = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Confidence"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Confidence, ULeapHand), 0x0000000000000015);
				UProperty* NewProp_Basis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Basis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Basis, ULeapHand), 0x0000000000000015, Z_Construct_UScriptStruct_FMatrix());
				UProperty* NewProp_PalmVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PalmVelocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PalmVelocity, ULeapHand), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PalmPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PalmPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PalmPosition, ULeapHand), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PalmOrientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PalmOrientation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PalmOrientation, ULeapHand), 0x0000000000000015, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_PalmNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PalmNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PalmNormal, ULeapHand), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_HandType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HandType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HandType, ULeapHand), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapHandType());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, ULeapHand, bool);
				UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, ULeapHand), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsValid, ULeapHand), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsRight, ULeapHand, bool);
				UProperty* NewProp_IsRight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsRight"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsRight, ULeapHand), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsRight, ULeapHand), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsLeft, ULeapHand, bool);
				UProperty* NewProp_IsLeft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsLeft"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsLeft, ULeapHand), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsLeft, ULeapHand), sizeof(bool), true);
				UProperty* NewProp_Arm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Arm"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Arm, ULeapHand), 0x0000000000000015, Z_Construct_UClass_ULeapArm_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_Fingers()); // 3021897954
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_Frame()); // 440764232
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_RotationAngle()); // 3724513855
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_RotationAngleWithAxis()); // 2735715159
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_RotationAxis()); // 562179038
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_RotationMatrix()); // 2198933553
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_RotationProbability()); // 110360433
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_ScaleFactor()); // 3775424784
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_ScaleProbability()); // 1625959822
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_Translation()); // 2730979914
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHand_TranslationProbability()); // 2383450768
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapHand.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_TimeVisible, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_TimeVisible, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_StabilizedPalmPosition, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_StabilizedPalmPosition, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_SphereRadius, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_SphereRadius, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_SphereCenter, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_SphereCenter, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_PinchStrength, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_PinchStrength, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_PalmWidth, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_PalmWidth, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_GrabStrength, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_GrabStrength, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_Confidence, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_Confidence, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_Basis, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_Basis, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_PalmVelocity, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_PalmVelocity, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_PalmPosition, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_PalmPosition, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_PalmOrientation, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_PalmOrientation, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_PalmOrientation, TEXT("ToolTip"), TEXT("Custom API, Origin is a flat palm facing down."));
				MetaData->SetValue(NewProp_PalmNormal, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_PalmNormal, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_HandType, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_HandType, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_IsValid, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_IsRight, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_IsRight, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_IsLeft, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_IsLeft, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
				MetaData->SetValue(NewProp_Arm, TEXT("Category"), TEXT("Leap Hand"));
				MetaData->SetValue(NewProp_Arm, TEXT("ModuleRelativePath"), TEXT("Public/LeapHand.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapHand(Z_Construct_UClass_ULeapHand, TEXT("ULeapHand"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapHand);
	UFunction* Z_Construct_UFunction_UAnimHand_ChangeBasis()
	{
		struct AnimHand_eventChangeBasis_Parms
		{
			FRotator PreBase;
			FRotator PostBase;
			bool adjustVectors;
		};
		UObject* Outer=Z_Construct_UClass_UAnimHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ChangeBasis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimHand_eventChangeBasis_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(adjustVectors, AnimHand_eventChangeBasis_Parms, bool);
			UProperty* NewProp_adjustVectors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("adjustVectors"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(adjustVectors, AnimHand_eventChangeBasis_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(adjustVectors, AnimHand_eventChangeBasis_Parms), sizeof(bool), true);
			UProperty* NewProp_PostBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PostBase, AnimHand_eventChangeBasis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_PreBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreBase, AnimHand_eventChangeBasis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_adjustVectors"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimHand_Enabled()
	{
		struct AnimHand_eventEnabled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Enabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimHand_eventEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimHand_eventEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimHand_eventEnabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimHand_eventEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimHand_SetEnabled()
	{
		struct AnimHand_eventSetEnabled_Parms
		{
			bool enable;
		};
		UObject* Outer=Z_Construct_UClass_UAnimHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimHand_eventSetEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(enable, AnimHand_eventSetEnabled_Parms, bool);
			UProperty* NewProp_enable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("enable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(enable, AnimHand_eventSetEnabled_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(enable, AnimHand_eventSetEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_enable"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimHand_SetFromLeapHand()
	{
		struct AnimHand_eventSetFromLeapHand_Parms
		{
			ULeapHand* leapHand;
		};
		UObject* Outer=Z_Construct_UClass_UAnimHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFromLeapHand"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimHand_eventSetFromLeapHand_Parms));
			UProperty* NewProp_leapHand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("leapHand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(leapHand, AnimHand_eventSetFromLeapHand_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("These will turn into interface events for the general case later on"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimHand_TranslateHand()
	{
		struct AnimHand_eventTranslateHand_Parms
		{
			FVector shift;
		};
		UObject* Outer=Z_Construct_UClass_UAnimHand();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TranslateHand"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimHand_eventTranslateHand_Parms));
			UProperty* NewProp_shift = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("shift"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(shift, AnimHand_eventTranslateHand_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Hand"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimHand_NoRegister()
	{
		return UAnimHand::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimHand()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = UAnimHand::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimHand_ChangeBasis());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimHand_Enabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimHand_SetEnabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimHand_SetFromLeapHand());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimHand_TranslateHand());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LowerArm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LowerArm"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LowerArm, UAnimHand), 0x0000000000000014, Z_Construct_UClass_UAnimBone_NoRegister());
				UProperty* NewProp_Palm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Palm"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Palm, UAnimHand), 0x0000000000000014, Z_Construct_UClass_UAnimBone_NoRegister());
				UProperty* NewProp_Wrist = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Wrist"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Wrist, UAnimHand), 0x0000000000000014, Z_Construct_UClass_UAnimBone_NoRegister());
				UProperty* NewProp_Pinky = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pinky"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Pinky, UAnimHand), 0x0000000000000014, Z_Construct_UClass_UAnimFinger_NoRegister());
				UProperty* NewProp_Ring = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Ring"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Ring, UAnimHand), 0x0000000000000014, Z_Construct_UClass_UAnimFinger_NoRegister());
				UProperty* NewProp_Middle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Middle"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Middle, UAnimHand), 0x0000000000000014, Z_Construct_UClass_UAnimFinger_NoRegister());
				UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Index, UAnimHand), 0x0000000000000014, Z_Construct_UClass_UAnimFinger_NoRegister());
				UProperty* NewProp_Thumb = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Thumb"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Thumb, UAnimHand), 0x0000000000000014, Z_Construct_UClass_UAnimFinger_NoRegister());
				UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, UAnimHand), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimHand_ChangeBasis()); // 909553586
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimHand_Enabled()); // 3194563251
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimHand_SetEnabled()); // 2591951755
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimHand_SetFromLeapHand()); // 109919104
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimHand_TranslateHand()); // 3691744080
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AnimBody/AnimHand.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_LowerArm, TEXT("Category"), TEXT("Anim Hand"));
				MetaData->SetValue(NewProp_LowerArm, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Palm, TEXT("Category"), TEXT("Anim Hand"));
				MetaData->SetValue(NewProp_Palm, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Wrist, TEXT("Category"), TEXT("Anim Hand"));
				MetaData->SetValue(NewProp_Wrist, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Wrist, TEXT("ToolTip"), TEXT("Arm and Wrist, NB: Consider moving this up the skeletal tree, for leap this is sufficient"));
				MetaData->SetValue(NewProp_Pinky, TEXT("Category"), TEXT("Anim Hand Finger"));
				MetaData->SetValue(NewProp_Pinky, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Ring, TEXT("Category"), TEXT("Anim Hand Finger"));
				MetaData->SetValue(NewProp_Ring, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Middle, TEXT("Category"), TEXT("Anim Hand Finger"));
				MetaData->SetValue(NewProp_Middle, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Index, TEXT("Category"), TEXT("Anim Hand Finger"));
				MetaData->SetValue(NewProp_Index, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Thumb, TEXT("Category"), TEXT("Anim Hand Finger"));
				MetaData->SetValue(NewProp_Thumb, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Thumb, TEXT("ToolTip"), TEXT("Fingers"));
				MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Anim Hand"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimHand.h"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ToolTip"), TEXT("Hand Properties"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimHand(Z_Construct_UClass_UAnimHand, TEXT("UAnimHand"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimHand);
	UFunction* Z_Construct_UFunction_UAnimBody_ChangeBasis()
	{
		struct AnimBody_eventChangeBasis_Parms
		{
			FRotator PreBase;
			FRotator PostBase;
			bool adjustVectors;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBody();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ChangeBasis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimBody_eventChangeBasis_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(adjustVectors, AnimBody_eventChangeBasis_Parms, bool);
			UProperty* NewProp_adjustVectors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("adjustVectors"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(adjustVectors, AnimBody_eventChangeBasis_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(adjustVectors, AnimBody_eventChangeBasis_Parms), sizeof(bool), true);
			UProperty* NewProp_PostBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PostBase, AnimBody_eventChangeBasis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_PreBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreBase"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PreBase, AnimBody_eventChangeBasis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Body"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_adjustVectors"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimBody_Enabled()
	{
		struct AnimBody_eventEnabled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBody();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Enabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimBody_eventEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AnimBody_eventEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AnimBody_eventEnabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AnimBody_eventEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Body"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimBody_SetEnabled()
	{
		struct AnimBody_eventSetEnabled_Parms
		{
			bool enable;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBody();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(AnimBody_eventSetEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(enable, AnimBody_eventSetEnabled_Parms, bool);
			UProperty* NewProp_enable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("enable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(enable, AnimBody_eventSetEnabled_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(enable, AnimBody_eventSetEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Body"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_enable"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAnimBody_TranslateBody()
	{
		struct AnimBody_eventTranslateBody_Parms
		{
			FVector shift;
		};
		UObject* Outer=Z_Construct_UClass_UAnimBody();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TranslateBody"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(AnimBody_eventTranslateBody_Parms));
			UProperty* NewProp_shift = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("shift"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(shift, AnimBody_eventTranslateBody_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Anim Body"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAnimBody_NoRegister()
	{
		return UAnimBody::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimBody()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = UAnimBody::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBody_ChangeBasis());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBody_Enabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBody_SetEnabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UAnimBody_TranslateBody());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Head = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Head"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Head, UAnimBody), 0x0000000000000014, Z_Construct_UClass_UAnimBone_NoRegister());
				UProperty* NewProp_Right = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Right"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Right, UAnimBody), 0x0000000000000014, Z_Construct_UClass_UAnimHand_NoRegister());
				UProperty* NewProp_Left = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Left"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Left, UAnimBody), 0x0000000000000014, Z_Construct_UClass_UAnimHand_NoRegister());
				UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alpha"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Alpha, UAnimBody), 0x0000000000000004);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBody_ChangeBasis()); // 3760110228
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBody_Enabled()); // 488866441
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBody_SetEnabled()); // 3216403033
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAnimBody_TranslateBody()); // 1874646503
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Animation Skeleton"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AnimBody/AnimBody.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("NB: this is a limited class used only for leap anim, full class will have full body"));
				MetaData->SetValue(NewProp_Head, TEXT("Category"), TEXT("Anim Body"));
				MetaData->SetValue(NewProp_Head, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
				MetaData->SetValue(NewProp_Head, TEXT("ToolTip"), TEXT("Head"));
				MetaData->SetValue(NewProp_Right, TEXT("Category"), TEXT("Anim Body"));
				MetaData->SetValue(NewProp_Right, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
				MetaData->SetValue(NewProp_Left, TEXT("Category"), TEXT("Anim Body"));
				MetaData->SetValue(NewProp_Left, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
				MetaData->SetValue(NewProp_Left, TEXT("ToolTip"), TEXT("Hands"));
				MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Anim Body"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimBody/AnimBody.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimBody(Z_Construct_UClass_UAnimBody, TEXT("UAnimBody"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimBody);
	UFunction* Z_Construct_UFunction_ULeapArm_GetOrientation()
	{
		struct LeapArm_eventGetOrientation_Parms
		{
			TEnumAsByte<LeapHandType> handType;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapArm();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOrientation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(LeapArm_eventGetOrientation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapArm_eventGetOrientation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_handType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("handType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(handType, LeapArm_eventGetOrientation_Parms), 0x0000000000000080, Z_Construct_UEnum_LeapMotion_LeapHandType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Arm"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapArm_NoRegister()
	{
		return ULeapArm::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapArm()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapArm::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapArm_GetOrientation());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WristPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WristPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WristPosition, ULeapArm), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, ULeapArm), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, ULeapArm, bool);
				UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, ULeapArm), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsValid, ULeapArm), sizeof(bool), true);
				UProperty* NewProp_ElbowPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ElbowPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ElbowPosition, ULeapArm), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, ULeapArm), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, ULeapArm), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Basis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Basis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Basis, ULeapArm), 0x0000000000000015, Z_Construct_UScriptStruct_FMatrix());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapArm_GetOrientation()); // 2978782995
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapArm.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
				MetaData->SetValue(NewProp_WristPosition, TEXT("Category"), TEXT("Leap Arm"));
				MetaData->SetValue(NewProp_WristPosition, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
				MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("Leap Arm"));
				MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
				MetaData->SetValue(NewProp_IsValid, TEXT("Category"), TEXT("Leap Arm"));
				MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
				MetaData->SetValue(NewProp_ElbowPosition, TEXT("Category"), TEXT("Leap Arm"));
				MetaData->SetValue(NewProp_ElbowPosition, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Leap Arm"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
				MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("Leap Arm"));
				MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
				MetaData->SetValue(NewProp_Basis, TEXT("Category"), TEXT("Leap Arm"));
				MetaData->SetValue(NewProp_Basis, TEXT("ModuleRelativePath"), TEXT("Public/LeapArm.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapArm(Z_Construct_UClass_ULeapArm, TEXT("ULeapArm"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapArm);
	UClass* Z_Construct_UClass_ULeapBaseObject_NoRegister()
	{
		return ULeapBaseObject::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapBaseObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapBaseObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapBaseObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapBaseObject.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapBaseObject(Z_Construct_UClass_ULeapBaseObject, TEXT("ULeapBaseObject"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapBaseObject);
	UFunction* Z_Construct_UFunction_ULeapBone_different()
	{
		struct LeapBone_eventdifferent_Parms
		{
			const ULeapBone* other;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("different"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LeapBone_eventdifferent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LeapBone_eventdifferent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LeapBone_eventdifferent_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LeapBone_eventdifferent_Parms), sizeof(bool), true);
			UProperty* NewProp_other = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("other"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(other, LeapBone_eventdifferent_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapBone_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("different"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("different operator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapBone_equal()
	{
		struct LeapBone_eventequal_Parms
		{
			const ULeapBone* other;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("equal"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LeapBone_eventequal_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LeapBone_eventequal_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LeapBone_eventequal_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LeapBone_eventequal_Parms), sizeof(bool), true);
			UProperty* NewProp_other = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("other"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(other, LeapBone_eventequal_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapBone_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("equal"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("equal operator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapBone_GetOrientation()
	{
		struct LeapBone_eventGetOrientation_Parms
		{
			TEnumAsByte<LeapHandType> handType;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapBone();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOrientation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(LeapBone_eventGetOrientation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapBone_eventGetOrientation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_handType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("handType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(handType, LeapBone_eventGetOrientation_Parms), 0x0000000000000080, Z_Construct_UEnum_LeapMotion_LeapHandType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Bone"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convenience method, requires knowledge of the hand this bone belongs to in order to give a correct orientation (left hand basis is different from right)."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapBone_NoRegister()
	{
		return ULeapBone::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapBone()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapBone::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapBone_different());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapBone_equal());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapBone_GetOrientation());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, ULeapBone), 0x0000000000000015);
				UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Type, ULeapBone), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapBoneType());
				UProperty* NewProp_PrevJoint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrevJoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PrevJoint, ULeapBone), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_NextJoint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NextJoint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NextJoint, ULeapBone), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Length"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Length, ULeapBone), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, ULeapBone, bool);
				UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, ULeapBone), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsValid, ULeapBone), sizeof(bool), true);
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, ULeapBone), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, ULeapBone), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Basis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Basis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Basis, ULeapBone), 0x0000000000000015, Z_Construct_UScriptStruct_FMatrix());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapBone_different()); // 4232989451
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapBone_equal()); // 1116435157
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapBone_GetOrientation()); // 1211810155
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapBone.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_Type, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_PrevJoint, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_PrevJoint, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_NextJoint, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_NextJoint, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_Length, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_Length, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_IsValid, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
				MetaData->SetValue(NewProp_Basis, TEXT("Category"), TEXT("Leap Bone"));
				MetaData->SetValue(NewProp_Basis, TEXT("ModuleRelativePath"), TEXT("Public/LeapBone.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapBone(Z_Construct_UClass_ULeapBone, TEXT("ULeapBone"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapBone);
	UFunction* Z_Construct_UFunction_ULeapGesture_Frame()
	{
		struct LeapGesture_eventFrame_Parms
		{
			ULeapFrame* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapGesture();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Frame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapGesture_eventFrame_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapGesture_eventFrame_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Gesture"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("frame"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapGesture_Hands()
	{
		struct LeapGesture_eventHands_Parms
		{
			ULeapHandList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapGesture();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Hands"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapGesture_eventHands_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapGesture_eventHands_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapHandList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Gesture"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("hands"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hands"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapGesture_Pointables()
	{
		struct LeapGesture_eventPointables_Parms
		{
			ULeapPointableList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapGesture();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pointables"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapGesture_eventPointables_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapGesture_eventPointables_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointableList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Gesture"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("pointables"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("pointables"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapGesture_NoRegister()
	{
		return ULeapGesture::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapGesture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapGesture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapGesture_Frame());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapGesture_Hands());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapGesture_Pointables());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Type, ULeapGesture), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapGestureType());
				UProperty* NewProp_State = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("State"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(State, ULeapGesture), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapGestureState());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, ULeapGesture, bool);
				UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, ULeapGesture), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsValid, ULeapGesture), sizeof(bool), true);
				UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Id, ULeapGesture), 0x0000000000000015);
				UProperty* NewProp_DurationSeconds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DurationSeconds"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DurationSeconds, ULeapGesture), 0x0000000000000015);
				UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Duration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Duration, ULeapGesture), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapGesture_Frame()); // 4064989835
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapGesture_Hands()); // 3228107046
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapGesture_Pointables()); // 3139565444
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapGesture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
				MetaData->SetValue(NewProp_Type, TEXT("Category"), TEXT("Leap Gesture"));
				MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
				MetaData->SetValue(NewProp_State, TEXT("Category"), TEXT("Leap Gesture"));
				MetaData->SetValue(NewProp_State, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
				MetaData->SetValue(NewProp_IsValid, TEXT("Category"), TEXT("Leap Gesture"));
				MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
				MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("Leap Gesture"));
				MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
				MetaData->SetValue(NewProp_DurationSeconds, TEXT("Category"), TEXT("Leap Gesture"));
				MetaData->SetValue(NewProp_DurationSeconds, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
				MetaData->SetValue(NewProp_Duration, TEXT("Category"), TEXT("Leap Gesture"));
				MetaData->SetValue(NewProp_Duration, TEXT("ModuleRelativePath"), TEXT("Public/LeapGesture.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapGesture(Z_Construct_UClass_ULeapGesture, TEXT("ULeapGesture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapGesture);
	UFunction* Z_Construct_UFunction_ULeapController_EnableBackgroundTracking()
	{
		struct LeapController_eventEnableBackgroundTracking_Parms
		{
			bool trackInBackground;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableBackgroundTracking"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapController_eventEnableBackgroundTracking_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(trackInBackground, LeapController_eventEnableBackgroundTracking_Parms, bool);
			UProperty* NewProp_trackInBackground = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackInBackground"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(trackInBackground, LeapController_eventEnableBackgroundTracking_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(trackInBackground, LeapController_eventEnableBackgroundTracking_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Controller"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_trackInBackground"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("enableBackgroundTracking"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("enable background tracking"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapController_EnableGesture()
	{
		struct LeapController_eventEnableGesture_Parms
		{
			TEnumAsByte<LeapGestureType> type;
			bool enable;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableGesture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapController_eventEnableGesture_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(enable, LeapController_eventEnableGesture_Parms, bool);
			UProperty* NewProp_enable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("enable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(enable, LeapController_eventEnableGesture_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(enable, LeapController_eventEnableGesture_Parms), sizeof(bool), true);
			UProperty* NewProp_type = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("type"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(type, LeapController_eventEnableGesture_Parms), 0x0000000000000080, Z_Construct_UEnum_LeapMotion_LeapGestureType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Controller"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_enable"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("enableGesture"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("enable gesture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapController_EnableImageSupport()
	{
		struct LeapController_eventEnableImageSupport_Parms
		{
			bool allowImages;
			bool emitImageEvents;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableImageSupport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapController_eventEnableImageSupport_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(emitImageEvents, LeapController_eventEnableImageSupport_Parms, bool);
			UProperty* NewProp_emitImageEvents = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("emitImageEvents"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(emitImageEvents, LeapController_eventEnableImageSupport_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(emitImageEvents, LeapController_eventEnableImageSupport_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(allowImages, LeapController_eventEnableImageSupport_Parms, bool);
			UProperty* NewProp_allowImages = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("allowImages"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(allowImages, LeapController_eventEnableImageSupport_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(allowImages, LeapController_eventEnableImageSupport_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Controller"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_allowImages"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_emitImageEvents"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("enableImageSupport"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("use allow images set policy"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapController_Frame()
	{
		struct LeapController_eventFrame_Parms
		{
			int32 history;
			ULeapFrame* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Frame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapController_eventFrame_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapController_eventFrame_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFrame_NoRegister());
			UProperty* NewProp_history = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("history"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(history, LeapController_eventFrame_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Controller"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapController_HasFocus()
	{
		struct LeapController_eventHasFocus_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasFocus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LeapController_eventHasFocus_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LeapController_eventHasFocus_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LeapController_eventHasFocus_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LeapController_eventHasFocus_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Controller"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("hasFocus"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("has Focus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapController_IsConnected()
	{
		struct LeapController_eventIsConnected_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsConnected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LeapController_eventIsConnected_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LeapController_eventIsConnected_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LeapController_eventIsConnected_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LeapController_eventIsConnected_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Controller"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Connected"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("is connected"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapController_IsServiceConnected()
	{
		struct LeapController_eventIsServiceConnected_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsServiceConnected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LeapController_eventIsServiceConnected_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LeapController_eventIsServiceConnected_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LeapController_eventIsServiceConnected_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LeapController_eventIsServiceConnected_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Controller"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("isServiceConnected"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("is service connected"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapController_OptimizeForHMD()
	{
		struct LeapController_eventOptimizeForHMD_Parms
		{
			bool useTopdown;
			bool autoRotate;
			bool autoShift;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OptimizeForHMD"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapController_eventOptimizeForHMD_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(autoShift, LeapController_eventOptimizeForHMD_Parms, bool);
			UProperty* NewProp_autoShift = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("autoShift"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(autoShift, LeapController_eventOptimizeForHMD_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(autoShift, LeapController_eventOptimizeForHMD_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(autoRotate, LeapController_eventOptimizeForHMD_Parms, bool);
			UProperty* NewProp_autoRotate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("autoRotate"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(autoRotate, LeapController_eventOptimizeForHMD_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(autoRotate, LeapController_eventOptimizeForHMD_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(useTopdown, LeapController_eventOptimizeForHMD_Parms, bool);
			UProperty* NewProp_useTopdown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("useTopdown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(useTopdown, LeapController_eventOptimizeForHMD_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(useTopdown, LeapController_eventOptimizeForHMD_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Controller"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_autoRotate"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_autoShift"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_useTopdown"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("optimizeForHMD"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("optimize hmd facing top set policy"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapController_SetInterfaceDelegate()
	{
		struct LeapController_eventSetInterfaceDelegate_Parms
		{
			UObject* newDelegate;
		};
		UObject* Outer=Z_Construct_UClass_ULeapController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInterfaceDelegate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapController_eventSetInterfaceDelegate_Parms));
			UProperty* NewProp_newDelegate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("newDelegate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(newDelegate, LeapController_eventSetInterfaceDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("setDelegate"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("set delegate self"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Leap Event Interface forwarding, automatically set since 0.6.2, available for event redirection"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapController_NoRegister()
	{
		return ULeapController::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapController::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_EnableBackgroundTracking());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_EnableGesture());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_EnableImageSupport());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_Frame());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_HasFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_IsConnected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_IsServiceConnected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_OptimizeForHMD());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapController_SetInterfaceDelegate());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_EnableBackgroundTracking()); // 1095058787
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_EnableGesture()); // 46748944
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_EnableImageSupport()); // 2387871062
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_Frame()); // 4165746538
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_HasFocus()); // 3313651226
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_IsConnected()); // 3709698530
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_IsServiceConnected()); // 4192559038
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_OptimizeForHMD()); // 476322988
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapController_SetInterfaceDelegate()); // 1506549944
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Input"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapController.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapController.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapController(Z_Construct_UClass_ULeapController, TEXT("ULeapController"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapController);
	UFunction* Z_Construct_UFunction_ULeapEventInterface_CircleGestureDetected()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CircleGestureDetected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventCircleGestureDetected_Parms));
			UProperty* NewProp_gesture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gesture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(gesture, LeapEventInterface_eventCircleGestureDetected_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapCircleGesture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("gesture circle detect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_FingerCountChanged()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FingerCountChanged"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventFingerCountChanged_Parms));
			UProperty* NewProp_count = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(count, LeapEventInterface_eventFingerCountChanged_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("FingerCountChanged"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("finger count"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("emitted only for frontmost finger, typically best use case"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_GestureDetected()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GestureDetected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventGestureDetected_Parms));
			UProperty* NewProp_gesture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gesture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(gesture, LeapEventInterface_eventGestureDetected_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapGesture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GestureDetected"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("gesture detect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gestures - Only emits if enabled"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_HandCountChanged()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HandCountChanged"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventHandCountChanged_Parms));
			UProperty* NewProp_count = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(count, LeapEventInterface_eventHandCountChanged_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandCountChanged"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand count"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_KeyTapGestureDetected()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KeyTapGestureDetected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventKeyTapGestureDetected_Parms));
			UProperty* NewProp_gesture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gesture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(gesture, LeapEventInterface_eventKeyTapGestureDetected_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapKeyTapGesture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("gesture key tap detect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapFingerMoved()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapFingerMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapFingerMoved_Parms));
			UProperty* NewProp_finger = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("finger"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(finger, LeapEventInterface_eventLeapFingerMoved_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("FingerMoved"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("finger moved"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Fingers"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapFrontFingerTouch()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapFrontFingerTouch"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapFrontFingerTouch_Parms));
			UProperty* NewProp_finger = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("finger"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(finger, LeapEventInterface_eventLeapFrontFingerTouch_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LeapFrontFingerTouch"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("finger touched"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapFrontMostFingerMoved()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapFrontMostFingerMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapFrontMostFingerMoved_Parms));
			UProperty* NewProp_finger = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("finger"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(finger, LeapEventInterface_eventLeapFrontMostFingerMoved_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("FrontFingerMoved"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("finger front most moved"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandGrabbed()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapHandGrabbed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapHandGrabbed_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapHandGrabbed_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			UProperty* NewProp_strength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(strength, LeapEventInterface_eventLeapHandGrabbed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandGrabbed"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand grab"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandGrabbing()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapHandGrabbing"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapHandGrabbing_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapHandGrabbing_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			UProperty* NewProp_strength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(strength, LeapEventInterface_eventLeapHandGrabbing_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandGrabbing"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand grab"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandMoved()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapHandMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapHandMoved_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapHandMoved_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandMoved"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand moved"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Hands"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandPinched()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapHandPinched"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapHandPinched_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapHandPinched_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			UProperty* NewProp_strength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(strength, LeapEventInterface_eventLeapHandPinched_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandPinched"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand pinch"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandPinching()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapHandPinching"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapHandPinching_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapHandPinching_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			UProperty* NewProp_strength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(strength, LeapEventInterface_eventLeapHandPinching_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandPinching"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand grab"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandReleased()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapHandReleased"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapHandReleased_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapHandReleased_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			UProperty* NewProp_strength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(strength, LeapEventInterface_eventLeapHandReleased_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandReleased"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand released ungrab"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapHandUnpinched()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapHandUnpinched"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapHandUnpinched_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapHandUnpinched_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			UProperty* NewProp_strength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(strength, LeapEventInterface_eventLeapHandUnpinched_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HandUnpinched"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand unpinch"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapLeftHandMoved()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapLeftHandMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapLeftHandMoved_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapLeftHandMoved_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LeftHandMoved"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("left hand moved"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapLeftMostFingerMoved()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapLeftMostFingerMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapLeftMostFingerMoved_Parms));
			UProperty* NewProp_finger = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("finger"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(finger, LeapEventInterface_eventLeapLeftMostFingerMoved_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RightFingerMoved"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("finger right most moved"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapRightHandMoved()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapRightHandMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapRightHandMoved_Parms));
			UProperty* NewProp_hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("hand"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(hand, LeapEventInterface_eventLeapRightHandMoved_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapHand_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("RightHandMoved"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("right hand moved"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_LeapRightMostFingerMoved()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LeapRightMostFingerMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventLeapRightMostFingerMoved_Parms));
			UProperty* NewProp_finger = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("finger"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(finger, LeapEventInterface_eventLeapRightMostFingerMoved_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("LeftFingerMoved"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("finger left most moved"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_RawImageReceived()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RawImageReceived"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventRawImageReceived_Parms));
			UProperty* NewProp_image = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("image"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(image, LeapEventInterface_eventRawImageReceived_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapImage_NoRegister());
			UProperty* NewProp_texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(texture, LeapEventInterface_eventRawImageReceived_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Images - Only emits if enabled"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_ScreenTapGestureDetected()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScreenTapGestureDetected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventScreenTapGestureDetected_Parms));
			UProperty* NewProp_gesture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gesture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(gesture, LeapEventInterface_eventScreenTapGestureDetected_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapScreenTapGesture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("gesture screen tap detect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapEventInterface_SwipeGestureDetected()
	{
		UObject* Outer=Z_Construct_UClass_ULeapEventInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SwipeGestureDetected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(LeapEventInterface_eventSwipeGestureDetected_Parms));
			UProperty* NewProp_gesture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gesture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(gesture, LeapEventInterface_eventSwipeGestureDetected_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapSwipeGesture_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interface Event"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("gesture swipe detect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapEventInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapEventInterface_NoRegister()
	{
		return ULeapEventInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapEventInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapEventInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_CircleGestureDetected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_FingerCountChanged());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_GestureDetected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_HandCountChanged());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_KeyTapGestureDetected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapFingerMoved());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapFrontFingerTouch());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapFrontMostFingerMoved());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapHandGrabbed());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapHandGrabbing());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapHandMoved());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapHandPinched());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapHandPinching());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapHandReleased());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapHandUnpinched());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapLeftHandMoved());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapLeftMostFingerMoved());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapRightHandMoved());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_LeapRightMostFingerMoved());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_RawImageReceived());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_ScreenTapGestureDetected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapEventInterface_SwipeGestureDetected());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_CircleGestureDetected()); // 454317550
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_FingerCountChanged()); // 2284710511
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_GestureDetected()); // 1155507078
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_HandCountChanged()); // 2681337991
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_KeyTapGestureDetected()); // 3883340263
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapFingerMoved()); // 3326297057
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapFrontFingerTouch()); // 2075198295
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapFrontMostFingerMoved()); // 2447812091
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapHandGrabbed()); // 1063911766
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapHandGrabbing()); // 2004233062
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapHandMoved()); // 670927891
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapHandPinched()); // 840346073
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapHandPinching()); // 4216296047
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapHandReleased()); // 1889063078
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapHandUnpinched()); // 4139027414
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapLeftHandMoved()); // 1849754855
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapLeftMostFingerMoved()); // 803369524
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapRightHandMoved()); // 535115523
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_LeapRightMostFingerMoved()); // 4248820425
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_RawImageReceived()); // 1422550897
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_ScreenTapGestureDetected()); // 186815063
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapEventInterface_SwipeGestureDetected()); // 2366557896
				OuterClass->StaticLink();
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapEventInterface(Z_Construct_UClass_ULeapEventInterface, TEXT("ULeapEventInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapEventInterface);
	UFunction* Z_Construct_UFunction_ULeapFingerList_append()
	{
		struct LeapFingerList_eventappend_Parms
		{
			const ULeapFingerList* list;
			ULeapFingerList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFingerList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("append"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFingerList_eventappend_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFingerList_eventappend_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFingerList_NoRegister());
			UProperty* NewProp_list = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("list"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(list, LeapFingerList_eventappend_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapFingerList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Finger List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("append"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("append"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFingerList_extended()
	{
		struct LeapFingerList_eventextended_Parms
		{
			ULeapFingerList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFingerList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("extended"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFingerList_eventextended_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFingerList_eventextended_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFingerList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Finger List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("extended"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("extended"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFingerList_frontmost()
	{
		struct LeapFingerList_eventfrontmost_Parms
		{
			ULeapFinger* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFingerList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("frontmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFingerList_eventfrontmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFingerList_eventfrontmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Finger List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("frontmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("frontmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFingerList_getPointableById()
	{
		struct LeapFingerList_eventgetPointableById_Parms
		{
			int32 id;
			ULeapFinger* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFingerList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getPointableById"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFingerList_eventgetPointableById_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFingerList_eventgetPointableById_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFinger_NoRegister());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(id, LeapFingerList_eventgetPointableById_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Finger List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("[]"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getPointableById"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get pointable by id"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFingerList_leftmost()
	{
		struct LeapFingerList_eventleftmost_Parms
		{
			ULeapFinger* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFingerList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("leftmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFingerList_eventleftmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFingerList_eventleftmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Finger List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("leftmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("leftmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFingerList_rightmost()
	{
		struct LeapFingerList_eventrightmost_Parms
		{
			ULeapFinger* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFingerList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("rightmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFingerList_eventrightmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFingerList_eventrightmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFinger_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Finger List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("rightmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rightmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapFingerList_NoRegister()
	{
		return ULeapFingerList::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapFingerList()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapFingerList::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFingerList_append());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFingerList_extended());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFingerList_frontmost());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFingerList_getPointableById());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFingerList_leftmost());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFingerList_rightmost());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsEmpty, ULeapFingerList, bool);
				UProperty* NewProp_IsEmpty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsEmpty"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsEmpty, ULeapFingerList), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsEmpty, ULeapFingerList), sizeof(bool), true);
				UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, ULeapFingerList), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFingerList_append()); // 4062597854
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFingerList_extended()); // 356515320
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFingerList_frontmost()); // 499747099
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFingerList_getPointableById()); // 2379922427
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFingerList_leftmost()); // 1150553071
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFingerList_rightmost()); // 67529473
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapFingerList.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("Category"), TEXT("Leap Finger List"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
				MetaData->SetValue(NewProp_Count, TEXT("Category"), TEXT("Leap Finger List"));
				MetaData->SetValue(NewProp_Count, TEXT("ModuleRelativePath"), TEXT("Public/LeapFingerList.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapFingerList(Z_Construct_UClass_ULeapFingerList, TEXT("ULeapFingerList"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapFingerList);
	UFunction* Z_Construct_UFunction_ULeapFrame_Finger()
	{
		struct LeapFrame_eventFinger_Parms
		{
			int32 id;
			ULeapFinger* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Finger"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventFinger_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventFinger_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFinger_NoRegister());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(id, LeapFrame_eventFinger_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Fingers()
	{
		struct LeapFrame_eventFingers_Parms
		{
			ULeapFingerList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Fingers"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventFingers_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventFingers_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFingerList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("fingers"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get fingers"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Gesture()
	{
		struct LeapFrame_eventGesture_Parms
		{
			int32 id;
			ULeapGesture* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Gesture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventGesture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventGesture_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapGesture_NoRegister());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(id, LeapFrame_eventGesture_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Gestures()
	{
		struct LeapFrame_eventGestures_Parms
		{
			ULeapGestureList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Gestures"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventGestures_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventGestures_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapGestureList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("gestures"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get gestures"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_GesturesSinceFrame()
	{
		struct LeapFrame_eventGesturesSinceFrame_Parms
		{
			ULeapFrame* frame;
			ULeapGestureList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GesturesSinceFrame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventGesturesSinceFrame_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventGesturesSinceFrame_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapGestureList_NoRegister());
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventGesturesSinceFrame_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("gestures"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get gestures"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Hand()
	{
		struct LeapFrame_eventHand_Parms
		{
			int32 id;
			ULeapHand* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Hand"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventHand_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventHand_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapHand_NoRegister());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(id, LeapFrame_eventHand_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Hands()
	{
		struct LeapFrame_eventHands_Parms
		{
			ULeapHandList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Hands"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventHands_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventHands_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapHandList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getHands"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get hands"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Images()
	{
		struct LeapFrame_eventImages_Parms
		{
			ULeapImageList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Images"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventImages_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventImages_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapImageList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("images"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get images"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_InteractionBox()
	{
		struct LeapFrame_eventInteractionBox_Parms
		{
			ULeapInteractionBox* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InteractionBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventInteractionBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventInteractionBox_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapInteractionBox_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("interactionBox"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get interaction box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Pointable()
	{
		struct LeapFrame_eventPointable_Parms
		{
			int32 id;
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pointable"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventPointable_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventPointable_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(id, LeapFrame_eventPointable_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Pointables()
	{
		struct LeapFrame_eventPointables_Parms
		{
			ULeapPointableList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pointables"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventPointables_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventPointables_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointableList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("pointables"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get pointables"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_RotationAngle()
	{
		struct LeapFrame_eventRotationAngle_Parms
		{
			ULeapFrame* frame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationAngle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventRotationAngle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventRotationAngle_Parms), 0x0000000000000580);
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventRotationAngle_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_RotationAngleAroundAxis()
	{
		struct LeapFrame_eventRotationAngleAroundAxis_Parms
		{
			ULeapFrame* frame;
			FVector axis;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationAngleAroundAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(LeapFrame_eventRotationAngleAroundAxis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventRotationAngleAroundAxis_Parms), 0x0000000000000580);
			UProperty* NewProp_axis = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("axis"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(axis, LeapFrame_eventRotationAngleAroundAxis_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventRotationAngleAroundAxis_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_RotationAxis()
	{
		struct LeapFrame_eventRotationAxis_Parms
		{
			ULeapFrame* frame;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationAxis"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(LeapFrame_eventRotationAxis_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventRotationAxis_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventRotationAxis_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_RotationProbability()
	{
		struct LeapFrame_eventRotationProbability_Parms
		{
			ULeapFrame* frame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotationProbability"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventRotationProbability_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventRotationProbability_Parms), 0x0000000000000580);
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventRotationProbability_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_ScaleFactor()
	{
		struct LeapFrame_eventScaleFactor_Parms
		{
			ULeapFrame* frame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScaleFactor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventScaleFactor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventScaleFactor_Parms), 0x0000000000000580);
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventScaleFactor_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_ScaleProbability()
	{
		struct LeapFrame_eventScaleProbability_Parms
		{
			ULeapFrame* frame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScaleProbability"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventScaleProbability_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventScaleProbability_Parms), 0x0000000000000580);
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventScaleProbability_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Tool()
	{
		struct LeapFrame_eventTool_Parms
		{
			int32 id;
			ULeapTool* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Tool"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventTool_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventTool_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapTool_NoRegister());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(id, LeapFrame_eventTool_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Tools()
	{
		struct LeapFrame_eventTools_Parms
		{
			ULeapToolList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Tools"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventTools_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventTools_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapToolList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("pointables"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get pointables"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_Translation()
	{
		struct LeapFrame_eventTranslation_Parms
		{
			ULeapFrame* frame;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Translation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(LeapFrame_eventTranslation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventTranslation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventTranslation_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapFrame_TranslationProbability()
	{
		struct LeapFrame_eventTranslationProbability_Parms
		{
			ULeapFrame* frame;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFrame();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TranslationProbability"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFrame_eventTranslationProbability_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFrame_eventTranslationProbability_Parms), 0x0000000000000580);
			UProperty* NewProp_frame = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("frame"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(frame, LeapFrame_eventTranslationProbability_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapFrame_NoRegister()
	{
		return ULeapFrame::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapFrame()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapFrame::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Finger());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Fingers());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Gesture());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Gestures());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_GesturesSinceFrame());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Hand());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Hands());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Images());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_InteractionBox());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Pointable());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Pointables());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_RotationAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_RotationAngleAroundAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_RotationAxis());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_RotationProbability());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_ScaleFactor());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_ScaleProbability());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Tool());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Tools());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_Translation());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFrame_TranslationProbability());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, ULeapFrame, bool);
				UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, ULeapFrame), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsValid, ULeapFrame), sizeof(bool), true);
				UProperty* NewProp_CurrentFPS = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentFPS"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurrentFPS, ULeapFrame), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Finger()); // 389337328
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Fingers()); // 1310592469
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Gesture()); // 3370294472
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Gestures()); // 1753106760
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_GesturesSinceFrame()); // 1906110422
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Hand()); // 1804785351
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Hands()); // 880293732
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Images()); // 765033170
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_InteractionBox()); // 3935169337
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Pointable()); // 3353810396
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Pointables()); // 85049549
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_RotationAngle()); // 1010747894
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_RotationAngleAroundAxis()); // 3103886563
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_RotationAxis()); // 1191948487
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_RotationProbability()); // 3741633224
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_ScaleFactor()); // 3503471574
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_ScaleProbability()); // 1757488544
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Tool()); // 2135656885
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Tools()); // 4225393221
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_Translation()); // 1355289917
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFrame_TranslationProbability()); // 157968298
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapFrame.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
				MetaData->SetValue(NewProp_IsValid, TEXT("Category"), TEXT("Leap Frame"));
				MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
				MetaData->SetValue(NewProp_CurrentFPS, TEXT("Category"), TEXT("Leap Frame"));
				MetaData->SetValue(NewProp_CurrentFPS, TEXT("ModuleRelativePath"), TEXT("Public/LeapFrame.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapFrame(Z_Construct_UClass_ULeapFrame, TEXT("ULeapFrame"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapFrame);
	UFunction* Z_Construct_UFunction_ULeapCircleGesture_Pointable()
	{
		struct LeapCircleGesture_eventPointable_Parms
		{
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapCircleGesture();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pointable"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapCircleGesture_eventPointable_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapCircleGesture_eventPointable_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Circle Gesture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapCircleGesture.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapCircleGesture_NoRegister()
	{
		return ULeapCircleGesture::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapCircleGesture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULeapGesture();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapCircleGesture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapCircleGesture_Pointable());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, ULeapCircleGesture), 0x0000000000000015);
				UProperty* NewProp_Progress = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Progress"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Progress, ULeapCircleGesture), 0x0000000000000015);
				UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Normal, ULeapCircleGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, ULeapCircleGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapCircleGesture_Pointable()); // 568433174
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapCircleGesture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapCircleGesture.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("Leap Circle Gesture"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Public/LeapCircleGesture.h"));
				MetaData->SetValue(NewProp_Progress, TEXT("Category"), TEXT("Leap Circle Gesture"));
				MetaData->SetValue(NewProp_Progress, TEXT("ModuleRelativePath"), TEXT("Public/LeapCircleGesture.h"));
				MetaData->SetValue(NewProp_Normal, TEXT("Category"), TEXT("Leap Circle Gesture"));
				MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Public/LeapCircleGesture.h"));
				MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("Leap Circle Gesture"));
				MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Public/LeapCircleGesture.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapCircleGesture(Z_Construct_UClass_ULeapCircleGesture, TEXT("ULeapCircleGesture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapCircleGesture);
	UFunction* Z_Construct_UFunction_ULeapKeyTapGesture_Pointable()
	{
		struct LeapKeyTapGesture_eventPointable_Parms
		{
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapKeyTapGesture();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pointable"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapKeyTapGesture_eventPointable_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapKeyTapGesture_eventPointable_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Key Tap Gesture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapKeyTapGesture.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapKeyTapGesture_NoRegister()
	{
		return ULeapKeyTapGesture::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapKeyTapGesture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULeapGesture();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapKeyTapGesture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapKeyTapGesture_Pointable());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Progress = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Progress"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Progress, ULeapKeyTapGesture), 0x0000000000000015);
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, ULeapKeyTapGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, ULeapKeyTapGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_BasicDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasicDirection"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BasicDirection, ULeapKeyTapGesture), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapBasicDirection());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapKeyTapGesture_Pointable()); // 2610662466
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapKeyTapGesture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapKeyTapGesture.h"));
				MetaData->SetValue(NewProp_Progress, TEXT("Category"), TEXT("Leap Key Tap Gesture"));
				MetaData->SetValue(NewProp_Progress, TEXT("ModuleRelativePath"), TEXT("Public/LeapKeyTapGesture.h"));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Leap Key Tap Gesture"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Public/LeapKeyTapGesture.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Leap Key Tap Gesture"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Public/LeapKeyTapGesture.h"));
				MetaData->SetValue(NewProp_BasicDirection, TEXT("Category"), TEXT("Leap Key Tap  Gesture"));
				MetaData->SetValue(NewProp_BasicDirection, TEXT("ModuleRelativePath"), TEXT("Public/LeapKeyTapGesture.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapKeyTapGesture(Z_Construct_UClass_ULeapKeyTapGesture, TEXT("ULeapKeyTapGesture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapKeyTapGesture);
	UFunction* Z_Construct_UFunction_ULeapScreenTapGesture_Pointable()
	{
		struct LeapScreenTapGesture_eventPointable_Parms
		{
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapScreenTapGesture();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pointable"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapScreenTapGesture_eventPointable_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapScreenTapGesture_eventPointable_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Screen Tap Gesture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapScreenTapGesture.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapScreenTapGesture_NoRegister()
	{
		return ULeapScreenTapGesture::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapScreenTapGesture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULeapGesture();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapScreenTapGesture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapScreenTapGesture_Pointable());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Progress = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Progress"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Progress, ULeapScreenTapGesture), 0x0000000000000015);
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, ULeapScreenTapGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, ULeapScreenTapGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_BasicDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasicDirection"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BasicDirection, ULeapScreenTapGesture), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapBasicDirection());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapScreenTapGesture_Pointable()); // 2924441917
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapScreenTapGesture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapScreenTapGesture.h"));
				MetaData->SetValue(NewProp_Progress, TEXT("Category"), TEXT("Leap Screen Tap Gesture"));
				MetaData->SetValue(NewProp_Progress, TEXT("ModuleRelativePath"), TEXT("Public/LeapScreenTapGesture.h"));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Leap Screen Tap Gesture"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Public/LeapScreenTapGesture.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Leap Screen Tap Gesture"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Public/LeapScreenTapGesture.h"));
				MetaData->SetValue(NewProp_BasicDirection, TEXT("Category"), TEXT("Leap Screen Tap  Gesture"));
				MetaData->SetValue(NewProp_BasicDirection, TEXT("ModuleRelativePath"), TEXT("Public/LeapScreenTapGesture.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapScreenTapGesture(Z_Construct_UClass_ULeapScreenTapGesture, TEXT("ULeapScreenTapGesture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapScreenTapGesture);
	UFunction* Z_Construct_UFunction_ULeapSwipeGesture_Pointable()
	{
		struct LeapSwipeGesture_eventPointable_Parms
		{
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapSwipeGesture();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pointable"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapSwipeGesture_eventPointable_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapSwipeGesture_eventPointable_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Swipe Gesture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapSwipeGesture.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapSwipeGesture_NoRegister()
	{
		return ULeapSwipeGesture::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapSwipeGesture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULeapGesture();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapSwipeGesture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapSwipeGesture_Pointable());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartPosition, ULeapSwipeGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Speed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Speed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Speed, ULeapSwipeGesture), 0x0000000000000015);
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, ULeapSwipeGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, ULeapSwipeGesture), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_BasicDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasicDirection"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BasicDirection, ULeapSwipeGesture), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapBasicDirection());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapSwipeGesture_Pointable()); // 1861902614
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapSwipeGesture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapSwipeGesture.h"));
				MetaData->SetValue(NewProp_StartPosition, TEXT("Category"), TEXT("Leap Swipe Gesture"));
				MetaData->SetValue(NewProp_StartPosition, TEXT("ModuleRelativePath"), TEXT("Public/LeapSwipeGesture.h"));
				MetaData->SetValue(NewProp_Speed, TEXT("Category"), TEXT("Leap Swipe Gesture"));
				MetaData->SetValue(NewProp_Speed, TEXT("ModuleRelativePath"), TEXT("Public/LeapSwipeGesture.h"));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Leap Swipe Gesture"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Public/LeapSwipeGesture.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Leap Swipe Gesture"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Public/LeapSwipeGesture.h"));
				MetaData->SetValue(NewProp_BasicDirection, TEXT("Category"), TEXT("Leap Swipe Gesture"));
				MetaData->SetValue(NewProp_BasicDirection, TEXT("ModuleRelativePath"), TEXT("Public/LeapSwipeGesture.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapSwipeGesture(Z_Construct_UClass_ULeapSwipeGesture, TEXT("ULeapSwipeGesture"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapSwipeGesture);
	UFunction* Z_Construct_UFunction_ULeapGestureList_getIndex()
	{
		struct LeapGestureList_eventgetIndex_Parms
		{
			int32 index;
			ULeapGesture* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapGestureList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapGestureList_eventgetIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapGestureList_eventgetIndex_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapGesture_NoRegister());
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(index, LeapGestureList_eventgetIndex_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Gesture List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("[]"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getIndex"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get index"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapGestureList.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapGestureList_NoRegister()
	{
		return ULeapGestureList::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapGestureList()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapGestureList::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapGestureList_getIndex());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, ULeapGestureList), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsEmpty, ULeapGestureList, bool);
				UProperty* NewProp_IsEmpty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsEmpty"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsEmpty, ULeapGestureList), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsEmpty, ULeapGestureList), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapGestureList_getIndex()); // 1594722605
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapGestureList.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapGestureList.h"));
				MetaData->SetValue(NewProp_Count, TEXT("Category"), TEXT("Leap Gesture List"));
				MetaData->SetValue(NewProp_Count, TEXT("ModuleRelativePath"), TEXT("Public/LeapGestureList.h"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("Category"), TEXT("Leap Gesture List"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("ModuleRelativePath"), TEXT("Public/LeapGestureList.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapGestureList(Z_Construct_UClass_ULeapGestureList, TEXT("ULeapGestureList"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapGestureList);
	UFunction* Z_Construct_UFunction_ULeapHandList_Frontmost()
	{
		struct LeapHandList_eventFrontmost_Parms
		{
			ULeapHand* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHandList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Frontmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHandList_eventFrontmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHandList_eventFrontmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapHand_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getFrontmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get frontmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHandList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHandList_getIndex()
	{
		struct LeapHandList_eventgetIndex_Parms
		{
			int32 index;
			ULeapHand* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHandList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHandList_eventgetIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHandList_eventgetIndex_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapHand_NoRegister());
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(index, LeapHandList_eventgetIndex_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getIndex"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get index"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHandList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHandList_Leftmost()
	{
		struct LeapHandList_eventLeftmost_Parms
		{
			ULeapHand* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHandList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Leftmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHandList_eventLeftmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHandList_eventLeftmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapHand_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getLeftmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get leftmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHandList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapHandList_Rightmost()
	{
		struct LeapHandList_eventRightmost_Parms
		{
			ULeapHand* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapHandList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Rightmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapHandList_eventRightmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapHandList_eventRightmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapHand_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Hand List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getRightmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get rightmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapHandList.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapHandList_NoRegister()
	{
		return ULeapHandList::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapHandList()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapHandList::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHandList_Frontmost());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHandList_getIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHandList_Leftmost());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapHandList_Rightmost());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, ULeapHandList), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsEmpty, ULeapHandList, bool);
				UProperty* NewProp_IsEmpty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsEmpty"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsEmpty, ULeapHandList), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsEmpty, ULeapHandList), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHandList_Frontmost()); // 3628062239
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHandList_getIndex()); // 4070208166
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHandList_Leftmost()); // 1182163254
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapHandList_Rightmost()); // 2751938132
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapHandList.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapHandList.h"));
				MetaData->SetValue(NewProp_Count, TEXT("Category"), TEXT("Leap Hand List"));
				MetaData->SetValue(NewProp_Count, TEXT("ModuleRelativePath"), TEXT("Public/LeapHandList.h"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("Category"), TEXT("Leap Hand List"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("ModuleRelativePath"), TEXT("Public/LeapHandList.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapHandList(Z_Construct_UClass_ULeapHandList, TEXT("ULeapHandList"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapHandList);
	UFunction* Z_Construct_UFunction_ULeapImage_Distortion()
	{
		struct LeapImage_eventDistortion_Parms
		{
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Distortion"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapImage_eventDistortion_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapImage_eventDistortion_Parms), 0x0000000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Image"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Distortion"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("distortion"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Faster raw distortion (R=U, G=V), requires channel conversion, 32bit float per channel texture will look odd if rendered raw."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapImage_DistortionUE()
	{
		struct LeapImage_eventDistortionUE_Parms
		{
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DistortionUE"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapImage_eventDistortionUE_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapImage_eventDistortionUE_Parms), 0x0000000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Image"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Distortion UE"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("distortion ue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Visually correct distortion in UE format (R=U, G=1-V) at the cost of additional CPU time (roughly 1ms) in 8bit per channel format"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapImage_R8Texture()
	{
		struct LeapImage_eventR8Texture_Parms
		{
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("R8Texture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapImage_eventR8Texture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapImage_eventR8Texture_Parms), 0x0000000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Image"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("R8Texture"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get texture single channel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapImage_Rectify()
	{
		struct LeapImage_eventRectify_Parms
		{
			FVector uv;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Rectify"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(LeapImage_eventRectify_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapImage_eventRectify_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_uv = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("uv"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(uv, LeapImage_eventRectify_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Image"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("rectify"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rectify"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapImage_Texture()
	{
		struct LeapImage_eventTexture_Parms
		{
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapImage_eventTexture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapImage_eventTexture_Parms), 0x0000000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Image"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Texture"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get texture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapImage_Warp()
	{
		struct LeapImage_eventWarp_Parms
		{
			FVector xy;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Warp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(LeapImage_eventWarp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapImage_eventWarp_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_xy = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("xy"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(xy, LeapImage_eventWarp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Image"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("warp"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("warp"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapImage_NoRegister()
	{
		return ULeapImage::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapImage()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapImage::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapImage_Distortion());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapImage_DistortionUE());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapImage_R8Texture());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapImage_Rectify());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapImage_Texture());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapImage_Warp());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, ULeapImage), 0x0000000000000015);
				UProperty* NewProp_RayScaleY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RayScaleY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RayScaleY, ULeapImage), 0x0000000000000015);
				UProperty* NewProp_RayScaleX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RayScaleX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RayScaleX, ULeapImage), 0x0000000000000015);
				UProperty* NewProp_RayOffsetY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RayOffsetY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RayOffsetY, ULeapImage), 0x0000000000000015);
				UProperty* NewProp_RayOffsetX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RayOffsetX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RayOffsetX, ULeapImage), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, ULeapImage, bool);
				UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, ULeapImage), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsValid, ULeapImage), sizeof(bool), true);
				UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Id, ULeapImage), 0x0000000000000015);
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, ULeapImage), 0x0000000000000015);
				UProperty* NewProp_DistortionWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistortionWidth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DistortionWidth, ULeapImage), 0x0000000000000015);
				UProperty* NewProp_DistortionHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistortionHeight"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DistortionHeight, ULeapImage), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapImage_Distortion()); // 1527410884
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapImage_DistortionUE()); // 32415880
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapImage_R8Texture()); // 3832038133
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapImage_Rectify()); // 1998556850
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapImage_Texture()); // 2722499380
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapImage_Warp()); // 3323460771
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapImage.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_RayScaleY, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_RayScaleY, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_RayScaleX, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_RayScaleX, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_RayOffsetY, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_RayOffsetY, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_RayOffsetX, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_RayOffsetX, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_IsValid, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_DistortionWidth, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_DistortionWidth, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
				MetaData->SetValue(NewProp_DistortionHeight, TEXT("Category"), TEXT("Leap Image"));
				MetaData->SetValue(NewProp_DistortionHeight, TEXT("ModuleRelativePath"), TEXT("Public/LeapImage.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapImage(Z_Construct_UClass_ULeapImage, TEXT("ULeapImage"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapImage);
	UFunction* Z_Construct_UFunction_ULeapImageList_getIndex()
	{
		struct LeapImageList_eventgetIndex_Parms
		{
			int32 index;
			ULeapImage* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapImageList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapImageList_eventgetIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapImageList_eventgetIndex_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapImage_NoRegister());
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(index, LeapImageList_eventgetIndex_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Image List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getIndex"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get index"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapImageList.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapImageList_NoRegister()
	{
		return ULeapImageList::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapImageList()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapImageList::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapImageList_getIndex());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, ULeapImageList), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsEmpty, ULeapImageList, bool);
				UProperty* NewProp_IsEmpty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsEmpty"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsEmpty, ULeapImageList), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsEmpty, ULeapImageList), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapImageList_getIndex()); // 948188459
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapImageList.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapImageList.h"));
				MetaData->SetValue(NewProp_Count, TEXT("Category"), TEXT("Leap Image List"));
				MetaData->SetValue(NewProp_Count, TEXT("ModuleRelativePath"), TEXT("Public/LeapImageList.h"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("Category"), TEXT("Leap Image List"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("ModuleRelativePath"), TEXT("Public/LeapImageList.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapImageList(Z_Construct_UClass_ULeapImageList, TEXT("ULeapImageList"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapImageList);
	UFunction* Z_Construct_UFunction_ULeapInteractionBox_DenormalizePoint()
	{
		struct LeapInteractionBox_eventDenormalizePoint_Parms
		{
			FVector position;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapInteractionBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DenormalizePoint"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(LeapInteractionBox_eventDenormalizePoint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapInteractionBox_eventDenormalizePoint_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(position, LeapInteractionBox_eventDenormalizePoint_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interaction Box"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("DenormalizePoint"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("normalize point"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapInteractionBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapInteractionBox_NormalizePoint()
	{
		struct LeapInteractionBox_eventNormalizePoint_Parms
		{
			FVector position;
			bool clamp;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapInteractionBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NormalizePoint"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(LeapInteractionBox_eventNormalizePoint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LeapInteractionBox_eventNormalizePoint_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(clamp, LeapInteractionBox_eventNormalizePoint_Parms, bool);
			UProperty* NewProp_clamp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("clamp"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(clamp, LeapInteractionBox_eventNormalizePoint_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(clamp, LeapInteractionBox_eventNormalizePoint_Parms), sizeof(bool), true);
			UProperty* NewProp_position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(position, LeapInteractionBox_eventNormalizePoint_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Interaction Box"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_clamp"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("normalizePoint"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("normalize point"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapInteractionBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapInteractionBox_NoRegister()
	{
		return ULeapInteractionBox::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapInteractionBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapInteractionBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapInteractionBox_DenormalizePoint());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapInteractionBox_NormalizePoint());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, ULeapInteractionBox), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, ULeapInteractionBox, bool);
				UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, ULeapInteractionBox), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsValid, ULeapInteractionBox), sizeof(bool), true);
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Height, ULeapInteractionBox), 0x0000000000000015);
				UProperty* NewProp_Depth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Depth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Depth, ULeapInteractionBox), 0x0000000000000015);
				UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Center"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Center, ULeapInteractionBox), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapInteractionBox_DenormalizePoint()); // 321409324
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapInteractionBox_NormalizePoint()); // 3829206418
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapInteractionBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapInteractionBox.h"));
				MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("Leap Interaction Box"));
				MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Public/LeapInteractionBox.h"));
				MetaData->SetValue(NewProp_IsValid, TEXT("Category"), TEXT("Leap Interaction Box"));
				MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/LeapInteractionBox.h"));
				MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Leap Interaction Box"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Public/LeapInteractionBox.h"));
				MetaData->SetValue(NewProp_Depth, TEXT("Category"), TEXT("Leap Interaction Box"));
				MetaData->SetValue(NewProp_Depth, TEXT("ModuleRelativePath"), TEXT("Public/LeapInteractionBox.h"));
				MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("Leap Interaction Box"));
				MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Public/LeapInteractionBox.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapInteractionBox(Z_Construct_UClass_ULeapInteractionBox, TEXT("ULeapInteractionBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapInteractionBox);
	UFunction* Z_Construct_UFunction_ULeapPointable_different()
	{
		struct LeapPointable_eventdifferent_Parms
		{
			const ULeapPointable* other;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointable();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("different"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(LeapPointable_eventdifferent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LeapPointable_eventdifferent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LeapPointable_eventdifferent_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LeapPointable_eventdifferent_Parms), sizeof(bool), true);
			UProperty* NewProp_other = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("other"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(other, LeapPointable_eventdifferent_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("different"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("different"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointable_equal()
	{
		struct LeapPointable_eventequal_Parms
		{
			const ULeapPointable* other;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointable();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("equal"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(LeapPointable_eventequal_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LeapPointable_eventequal_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LeapPointable_eventequal_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LeapPointable_eventequal_Parms), sizeof(bool), true);
			UProperty* NewProp_other = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("other"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(other, LeapPointable_eventequal_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("equal"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("equal"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointable_Frame()
	{
		struct LeapPointable_eventFrame_Parms
		{
			ULeapFrame* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointable();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Frame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(LeapPointable_eventFrame_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointable_eventFrame_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapFrame_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("frame"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("frame"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointable_Hand()
	{
		struct LeapPointable_eventHand_Parms
		{
			ULeapHand* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointable();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Hand"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(LeapPointable_eventHand_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointable_eventHand_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapHand_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("hand"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("hand"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapPointable_NoRegister()
	{
		return ULeapPointable::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapPointable()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapPointable::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointable_different());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointable_equal());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointable_Frame());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointable_Hand());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, ULeapPointable), 0x0000000000000015);
				UProperty* NewProp_TouchZone = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchZone"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TouchZone, ULeapPointable), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapZone());
				UProperty* NewProp_TouchDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TouchDistance, ULeapPointable), 0x0000000000000015);
				UProperty* NewProp_TipVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TipVelocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TipVelocity, ULeapPointable), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_TipPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TipPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TipPosition, ULeapPointable), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_TimeVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeVisible"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeVisible, ULeapPointable), 0x0000000000000015);
				UProperty* NewProp_StabilizedTipPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StabilizedTipPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StabilizedTipPosition, ULeapPointable), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Length"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Length, ULeapPointable), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsValid, ULeapPointable, bool);
				UProperty* NewProp_IsValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsValid"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsValid, ULeapPointable), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsValid, ULeapPointable), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsTool, ULeapPointable, bool);
				UProperty* NewProp_IsTool = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsTool"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsTool, ULeapPointable), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsTool, ULeapPointable), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsFinger, ULeapPointable, bool);
				UProperty* NewProp_IsFinger = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsFinger"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsFinger, ULeapPointable), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsFinger, ULeapPointable), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsExtended, ULeapPointable, bool);
				UProperty* NewProp_IsExtended = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsExtended"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsExtended, ULeapPointable), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsExtended, ULeapPointable), sizeof(bool), true);
				UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Id, ULeapPointable), 0x0000000000000015);
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Direction, ULeapPointable), 0x0000000000000015, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointable_different()); // 1762735296
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointable_equal()); // 262878760
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointable_Frame()); // 1170349051
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointable_Hand()); // 3711679557
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapPointable.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_TouchZone, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_TouchZone, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_TouchDistance, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_TouchDistance, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_TipVelocity, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_TipVelocity, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_TipPosition, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_TipPosition, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_TimeVisible, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_TimeVisible, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_StabilizedTipPosition, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_StabilizedTipPosition, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_Length, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_Length, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_IsValid, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_IsValid, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_IsTool, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_IsTool, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_IsFinger, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_IsFinger, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_IsExtended, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_IsExtended, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Leap Pointable"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointable.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapPointable(Z_Construct_UClass_ULeapPointable, TEXT("ULeapPointable"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapPointable);
	UFunction* Z_Construct_UFunction_ULeapFinger_Bone()
	{
		struct LeapFinger_eventBone_Parms
		{
			TEnumAsByte<LeapBoneType> type;
			ULeapBone* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapFinger();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Bone"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapFinger_eventBone_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapFinger_eventBone_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapBone_NoRegister());
			UProperty* NewProp_type = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("type"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(type, LeapFinger_eventBone_Parms), 0x0000000000000080, Z_Construct_UEnum_LeapMotion_LeapBoneType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Finger"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapFinger.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapFinger_NoRegister()
	{
		return ULeapFinger::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapFinger()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULeapPointable();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapFinger::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapFinger_Bone());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Type, ULeapFinger), 0x0000000000000015, Z_Construct_UEnum_LeapMotion_LeapFingerType());
				UProperty* NewProp_Distal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Distal"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Distal, ULeapFinger), 0x0000000000000015, Z_Construct_UClass_ULeapBone_NoRegister());
				UProperty* NewProp_Intermediate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Intermediate"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Intermediate, ULeapFinger), 0x0000000000000015, Z_Construct_UClass_ULeapBone_NoRegister());
				UProperty* NewProp_Proximal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Proximal"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Proximal, ULeapFinger), 0x0000000000000015, Z_Construct_UClass_ULeapBone_NoRegister());
				UProperty* NewProp_Metacarpal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Metacarpal"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Metacarpal, ULeapFinger), 0x0000000000000015, Z_Construct_UClass_ULeapBone_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapFinger_Bone()); // 3894608474
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapFinger.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapFinger.h"));
				MetaData->SetValue(NewProp_Type, TEXT("Category"), TEXT("Leap Finger"));
				MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Public/LeapFinger.h"));
				MetaData->SetValue(NewProp_Distal, TEXT("Category"), TEXT("Leap Finger"));
				MetaData->SetValue(NewProp_Distal, TEXT("ModuleRelativePath"), TEXT("Public/LeapFinger.h"));
				MetaData->SetValue(NewProp_Intermediate, TEXT("Category"), TEXT("Leap Finger"));
				MetaData->SetValue(NewProp_Intermediate, TEXT("ModuleRelativePath"), TEXT("Public/LeapFinger.h"));
				MetaData->SetValue(NewProp_Proximal, TEXT("Category"), TEXT("Leap Finger"));
				MetaData->SetValue(NewProp_Proximal, TEXT("ModuleRelativePath"), TEXT("Public/LeapFinger.h"));
				MetaData->SetValue(NewProp_Metacarpal, TEXT("Category"), TEXT("Leap Finger"));
				MetaData->SetValue(NewProp_Metacarpal, TEXT("ModuleRelativePath"), TEXT("Public/LeapFinger.h"));
				MetaData->SetValue(NewProp_Metacarpal, TEXT("ToolTip"), TEXT("Convenience Properties"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapFinger(Z_Construct_UClass_ULeapFinger, TEXT("ULeapFinger"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapFinger);
	UClass* Z_Construct_UClass_ULeapTool_NoRegister()
	{
		return ULeapTool::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapTool()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULeapPointable();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapTool::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapTool.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapTool.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapTool(Z_Construct_UClass_ULeapTool, TEXT("ULeapTool"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapTool);
	UFunction* Z_Construct_UFunction_ULeapPointableList_append()
	{
		struct LeapPointableList_eventappend_Parms
		{
			ULeapPointableList* list;
			ULeapPointableList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointableList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("append"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapPointableList_eventappend_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointableList_eventappend_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointableList_NoRegister());
			UProperty* NewProp_list = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("list"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(list, LeapPointableList_eventappend_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapPointableList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("append"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("append"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointableList_appendFingers()
	{
		struct LeapPointableList_eventappendFingers_Parms
		{
			ULeapFingerList* list;
			ULeapPointableList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointableList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("appendFingers"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapPointableList_eventappendFingers_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointableList_eventappendFingers_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointableList_NoRegister());
			UProperty* NewProp_list = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("list"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(list, LeapPointableList_eventappendFingers_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapFingerList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("appendFingers"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("append"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointableList_appendTools()
	{
		struct LeapPointableList_eventappendTools_Parms
		{
			ULeapToolList* list;
			ULeapPointableList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointableList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("appendTools"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapPointableList_eventappendTools_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointableList_eventappendTools_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointableList_NoRegister());
			UProperty* NewProp_list = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("list"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(list, LeapPointableList_eventappendTools_Parms), 0x0000000000000080, Z_Construct_UClass_ULeapToolList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("appendTools"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("append"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointableList_extended()
	{
		struct LeapPointableList_eventextended_Parms
		{
			ULeapPointableList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointableList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("extended"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapPointableList_eventextended_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointableList_eventextended_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointableList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("extended"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("extended"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointableList_frontmost()
	{
		struct LeapPointableList_eventfrontmost_Parms
		{
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointableList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("frontmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapPointableList_eventfrontmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointableList_eventfrontmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("frontmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("frontmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointableList_getPointableById()
	{
		struct LeapPointableList_eventgetPointableById_Parms
		{
			int32 id;
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointableList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getPointableById"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapPointableList_eventgetPointableById_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointableList_eventgetPointableById_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(id, LeapPointableList_eventgetPointableById_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("[]"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getPointableById"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get pointable by id"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointableList_leftmost()
	{
		struct LeapPointableList_eventleftmost_Parms
		{
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointableList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("leftmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapPointableList_eventleftmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointableList_eventleftmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("leftmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("leftmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapPointableList_rightmost()
	{
		struct LeapPointableList_eventrightmost_Parms
		{
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapPointableList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("rightmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapPointableList_eventrightmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapPointableList_eventrightmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Pointable List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("rightmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rightmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapPointableList_NoRegister()
	{
		return ULeapPointableList::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapPointableList()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapPointableList::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointableList_append());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointableList_appendFingers());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointableList_appendTools());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointableList_extended());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointableList_frontmost());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointableList_getPointableById());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointableList_leftmost());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapPointableList_rightmost());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsEmpty, ULeapPointableList, bool);
				UProperty* NewProp_IsEmpty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsEmpty"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsEmpty, ULeapPointableList), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsEmpty, ULeapPointableList), sizeof(bool), true);
				UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, ULeapPointableList), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointableList_append()); // 950983655
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointableList_appendFingers()); // 726478611
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointableList_appendTools()); // 3125734223
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointableList_extended()); // 3028567989
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointableList_frontmost()); // 4014766802
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointableList_getPointableById()); // 3478372798
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointableList_leftmost()); // 1055289843
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapPointableList_rightmost()); // 2058248980
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapPointableList.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("Category"), TEXT("Leap Pointable List"));
				MetaData->SetValue(NewProp_IsEmpty, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
				MetaData->SetValue(NewProp_Count, TEXT("Category"), TEXT("Leap Pointable List"));
				MetaData->SetValue(NewProp_Count, TEXT("ModuleRelativePath"), TEXT("Public/LeapPointableList.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapPointableList(Z_Construct_UClass_ULeapPointableList, TEXT("ULeapPointableList"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapPointableList);
	UFunction* Z_Construct_UFunction_ULeapToolList_append()
	{
		struct LeapToolList_eventappend_Parms
		{
			const ULeapToolList* list;
			ULeapToolList* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapToolList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("append"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapToolList_eventappend_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapToolList_eventappend_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapToolList_NoRegister());
			UProperty* NewProp_list = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("list"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(list, LeapToolList_eventappend_Parms), 0x0000000000000082, Z_Construct_UClass_ULeapToolList_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Tool List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("append"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("append"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapToolList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapToolList_Count()
	{
		struct LeapToolList_eventCount_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapToolList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LeapToolList_eventCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, LeapToolList_eventCount_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Tool List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("count"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("count"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapToolList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapToolList_frontmost()
	{
		struct LeapToolList_eventfrontmost_Parms
		{
			ULeapTool* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapToolList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("frontmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapToolList_eventfrontmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapToolList_eventfrontmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapTool_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Tool List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("frontmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("frontmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapToolList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapToolList_getPointableById()
	{
		struct LeapToolList_eventgetPointableById_Parms
		{
			int32 id;
			ULeapPointable* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapToolList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getPointableById"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapToolList_eventgetPointableById_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapToolList_eventgetPointableById_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapPointable_NoRegister());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(id, LeapToolList_eventgetPointableById_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Tool List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("[]"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("getPointableById"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("get pointable by id"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapToolList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapToolList_isEmpty()
	{
		struct LeapToolList_eventisEmpty_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapToolList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("isEmpty"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(LeapToolList_eventisEmpty_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LeapToolList_eventisEmpty_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LeapToolList_eventisEmpty_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LeapToolList_eventisEmpty_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Tool List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("isEmpty"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("is empty"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapToolList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapToolList_leftmost()
	{
		struct LeapToolList_eventleftmost_Parms
		{
			ULeapTool* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapToolList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("leftmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapToolList_eventleftmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapToolList_eventleftmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapTool_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Tool List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("leftmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("leftmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapToolList.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULeapToolList_rightmost()
	{
		struct LeapToolList_eventrightmost_Parms
		{
			ULeapTool* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULeapToolList();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("rightmost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(LeapToolList_eventrightmost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, LeapToolList_eventrightmost_Parms), 0x0000000000000580, Z_Construct_UClass_ULeapTool_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Leap Tool List"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("rightmost"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("rightmost"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LeapToolList.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULeapToolList_NoRegister()
	{
		return ULeapToolList::StaticClass();
	}
	UClass* Z_Construct_UClass_ULeapToolList()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_LeapMotion();
			OuterClass = ULeapToolList::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULeapToolList_append());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapToolList_Count());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapToolList_frontmost());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapToolList_getPointableById());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapToolList_isEmpty());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapToolList_leftmost());
				OuterClass->LinkChild(Z_Construct_UFunction_ULeapToolList_rightmost());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapToolList_append()); // 4097182063
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapToolList_Count()); // 3051835578
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapToolList_frontmost()); // 4143719307
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapToolList_getPointableById()); // 4208966699
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapToolList_isEmpty()); // 88105543
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapToolList_leftmost()); // 2894611553
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ULeapToolList_rightmost()); // 3547562052
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LeapToolList.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LeapToolList.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULeapToolList(Z_Construct_UClass_ULeapToolList, TEXT("ULeapToolList"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULeapToolList);
	UPackage* Z_Construct_UPackage_LeapMotion()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/LeapMotion")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x54BE2DCE;
			Guid.B = 0x4FACA5EA;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
